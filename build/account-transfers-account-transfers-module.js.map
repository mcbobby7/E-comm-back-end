{"version":3,"sources":["./src/app/account-transfers/account-transfers-routing.module.ts","./src/app/account-transfers/account-transfers.module.ts","./src/app/account-transfers/account-transfers.service.ts","./src/app/account-transfers/common-resolvers/list-transactions.resolver.ts","./src/app/account-transfers/common-resolvers/make-account-transfer-template.resolver.ts","./src/app/account-transfers/common-resolvers/standing-instructions-data-and-template.resolver.ts","./src/app/account-transfers/common-resolvers/standing-instructions-template.resolver.ts","./src/app/account-transfers/common-resolvers/view-account-transfer.resolver.ts","./src/app/account-transfers/common-resolvers/view-standing-instructions.resolver.ts","./src/app/account-transfers/create-standing-instructions/create-standing-instructions.component.ts","./src/app/account-transfers/create-standing-instructions/create-standing-instructions.component.html","./src/app/account-transfers/edit-standing-instructions/edit-standing-instructions.component.ts","./src/app/account-transfers/edit-standing-instructions/edit-standing-instructions.component.html","./src/app/account-transfers/list-standing-instructions/list-standing-instructions.component.ts","./src/app/account-transfers/list-standing-instructions/list-standing-instructions.component.html","./src/app/account-transfers/list-transactions/list-transactions.component.ts","./src/app/account-transfers/list-transactions/list-transactions.component.html","./src/app/account-transfers/make-account-transfers/make-account-transfers.component.ts","./src/app/account-transfers/make-account-transfers/make-account-transfers.component.html","./src/app/account-transfers/view-account-transfer/view-account-transfer.component.ts","./src/app/account-transfers/view-account-transfer/view-account-transfer.component.html","./src/app/account-transfers/view-standing-instructions/view-standing-instructions.component.ts","./src/app/account-transfers/view-standing-instructions/view-standing-instructions.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACmB;AACc;AAEvD,0BAA0B;AAC0B;AAEpD,wBAAwB;AAC8F;AACA;AACM;AAClB;AACY;AAC1B;AACW;AAEvG,uBAAuB;AACmF;AACwB;AAChB;AACD;AACxB;AACO;;;AAEhG,mBAAmB;AACnB,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,8BAA8B;gBACpC,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,8BAA8B,CAAC,EAAE,UAAU,EAAE,8BAA8B,EAAE,oBAAoB,EAAE,8BAA8B,EAAE;gBAC1J,SAAS,EAAE,wIAAmC;gBAC9C,OAAO,EAAE;oBACP,2BAA2B,EAAE,+HAAoC;iBAClE;aACF;YACD;gBACE,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,kBAAkB,CAAC,EAAE,UAAU,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,kBAAkB,EAAE;gBACtH,SAAS,EAAE,sHAA6B;gBACxC,OAAO,EAAE;oBACP,uBAAuB,EAAE,8HAAmC;iBAC7D;aACF;YACD;gBACE,IAAI,EAAE,4BAA4B;gBAClC,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,4BAA4B,CAAC,EAAE,UAAU,EAAE,4BAA4B,EAAE,oBAAoB,EAAE,4BAA4B,EAAE;gBACpJ,SAAS,EAAE,kIAAiC;gBAC5C,OAAO,EAAE;oBACP,2BAA2B,EAAE,+HAAoC;iBAClE;aACF;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,uBAAuB,CAAC,EAAE,UAAU,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,KAAK,EAAE;gBAC/G,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,aAAa;wBACnB,IAAI,EAAE,EAAE,oBAAoB,EAAE,YAAY,EAAE;wBAC5C,SAAS,EAAE,mHAA4B;wBACvC,OAAO,EAAE;4BACP,uBAAuB,EAAE,6GAA2B;yBACrD;qBACF;iBACF;aACF;YACD;gBACE,IAAI,EAAE,yBAAyB;gBAC/B,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,uBAAuB,CAAC,EAAE,oBAAoB,EAAE,wBAAwB,EAAE;gBACjG,QAAQ,EAAE;oBACR;wBACE,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,4BAA4B,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,oBAAoB,EAAE,KAAK,EAAE;wBACvG,SAAS,EAAE,kIAAiC;wBAC5C,OAAO,EAAE;4BACP,wBAAwB,EAAE,uHAAgC;yBAC3D;qBACF;oBACD;wBACE,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,4BAA4B,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,oBAAoB,EAAE,KAAK,EAAE;wBACvG,SAAS,EAAE,kIAAiC;wBAC5C,OAAO,EAAE;4BACP,mCAAmC,EAAE,+IAA2C;yBACjF;qBACF;oBACD;wBACE,IAAI,EAAE,2BAA2B;wBACjC,IAAI,EAAE,EAAE,KAAK,EAAE,uEAAO,CAAC,2BAA2B,CAAC,EAAE,UAAU,EAAE,2BAA2B,EAAE,oBAAoB,EAAE,2BAA2B,EAAE;wBACjJ,SAAS,EAAE,wGAAyB;wBACpC,OAAO,EAAE;4BACP,mBAAmB,EAAE,sGAAwB;yBAC9C;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AACF;IAAA;KAc8C;gHAAjC,6BAA6B;wLAA7B,6BAA6B,mBAV7B;YACT,uHAAgC;YAChC,+IAA2C;YAC3C,+HAAoC;YACpC,8HAAmC;YACnC,sGAAwB;YACxB,6GAA2B;SAC5B,YAVQ,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9B,4DAAY;wCAtGxB;CAkH8C;AAAJ;mIAA7B,6BAA6B,uFAZ9B,4DAAY;6FAYX,6BAA6B;cAdzC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;gBACvB,YAAY,EAAE,EAAE;gBAChB,SAAS,EAAE;oBACT,uHAAgC;oBAChC,+IAA2C;oBAC3C,+HAAoC;oBACpC,8HAAmC;oBACnC,sGAAwB;oBACxB,6GAA2B;iBAC5B;aACF;;;;;;;;;;;;;;AChHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACmB;AACE;AAE3C,qBAAqB;AAC8D;AAC3B;AACJ;AACe;AAEnE,wBAAwB;AAC8F;AACA;AACM;AAClB;AACY;AAC1B;AACW;;AACvG;;;;GAIG;AACH;IAAA;KAauC;yGAA1B,sBAAsB;0KAAtB,sBAAsB,mBAFtB,CAAC,wDAAQ,CAAC,YAVZ,CAAC,qEAAY,EAAE,+DAAW,EAAE,8EAAgB,EAAE,+FAA6B,CAAC;iCAxBvF;CAoCuC;AAAJ;mIAAtB,sBAAsB,mBAV/B,kIAAiC;QACjC,kIAAiC;QACjC,wIAAmC;QACnC,sHAA6B;QAC7B,mIAAiC;QACjC,yGAAyB;QACzB,oHAA4B,aARpB,qEAAY,EAAE,+DAAW,EAAE,8EAAgB,EAAE,+FAA6B;6FAYzE,sBAAsB;cAblC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,qEAAY,EAAE,+DAAW,EAAE,8EAAgB,EAAE,+FAA6B,CAAC;gBACrF,YAAY,EAAE;oBACZ,kIAAiC;oBACjC,kIAAiC;oBACjC,wIAAmC;oBACnC,sHAA6B;oBAC7B,mIAAiC;oBACjC,yGAAyB;oBACzB,oHAA4B;iBAC7B;gBACD,SAAS,EAAE,CAAC,wDAAQ,CAAC;aACtB;;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AACmB;;;AAK9D;;GAEG;AACH;IAKE,iCAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC;;;OAGG;IACH,6DAA2B,GAA3B,UAA4B,sBAA2B;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAAyB,sBAAwB,CAAC,CAAC;IAC1E,CAAC;IAED,wEAAsC,GAAtC,UAAuC,sBAA2B;QAChE,IAAM,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QACpE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAAyB,sBAAwB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IAClG,CAAC;IAED,gEAA8B,GAA9B,UAA+B,sBAA2B,EAAE,IAAS;QACnE,IAAM,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAAyB,sBAAwB,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IACxG,CAAC;IAED,iEAA+B,GAA/B,UAAgC,QAAa,EAAE,QAAa,EAAE,aAAqB,EAAE,SAAe;QAClG,IAAI,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC;aACnC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC;aAC7B,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAClE,IAAI,SAAS,EAAE;YACb,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC9B,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC5D;SACF;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gCAAgC,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IACjF,CAAC;IAED,4DAA0B,GAA1B,UAA2B,IAAY;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,2DAAyB,GAAzB,UAA0B,EAAO,EAAE,aAAkB,EAAE,SAAe;QACpE,IAAI,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC;aACvD,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QACzC,IAAI,SAAS,EAAE;YACb,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACzC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC9B,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC5D;SACF;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,4BAA4B,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IAE7E,CAAC;IAED,uDAAqB,GAArB,UAAsB,IAAS;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;OAOG;IACH,yDAAuB,GAAvB,UAAwB,UAAe;QACrC,IAAI,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC;QAClC,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,SAAS,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,EAAE;gBACzG,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC7D;SACF;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,2DAAyB,GAAzB,UAA0B,EAAO;QAC/B,IAAM,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,2BAAyB,EAAI,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IACjF,CAAC;IAGD,qEAAmC,GAAnC,UAAoC,sBAA2B,EAAE,UAAe,EAAE,MAAW;QAC3F,IAAM,UAAU,GAAG,IAAI,+DAAU,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC;aAClC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC;aAC7B,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;aAClB,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;aACrB,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAAyB,sBAAwB,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;IAClG,CAAC;IAED,+DAA6B,GAA7B,UAA8B,UAAe;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uBAAqB,UAAY,CAAC,CAAC;IAC1D,CAAC;kGA/FU,uBAAuB;8GAAvB,uBAAuB,WAAvB,uBAAuB,mBAFtB,MAAM;kCAXpB;CA8GC;AAjGmC;6FAAvB,uBAAuB;cAHnC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AAM3C,sBAAsB;AACiD;AACP;;;;AAEhE;;GAEG;AACH;IAGI;;;OAGG;IACH,kCAAoB,uBAAgD,EACxD,eAAgC;QADxB,4BAAuB,GAAvB,uBAAuB,CAAyB;QACxD,oBAAe,GAAf,eAAe,CAAiB;IAAI,CAAC;IAEjD;;;;OAIG;IACH,0CAAO,GAAP,UAAQ,KAA6B;QACjC,IAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAC/D,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QACnD,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,OAAO,IAAI,CAAC,uBAAuB,CAAC,mCAAmC,CAAC,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IACpG,CAAC;oGAnBQ,wBAAwB;+GAAxB,wBAAwB,WAAxB,wBAAwB;mCAfrC;CAmCC;AApBoC;6FAAxB,wBAAwB;cADpC,wDAAU;;;;;;;;;;;;;;ACdX;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AAM3C,sBAAsB;AACiD;;;AAEvE;;GAEG;AACH;IAKI;;OAEG;IACH,6CAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAI,CAAC;IAEzE;;;;OAIG;IACH,qDAAO,GAAP,UAAQ,KAA6B;QACjC,IAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3D,QAAQ,WAAW,EAAE;YACjB,KAAK,WAAW;gBACZ,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC5C,MAAM;YACV,KAAK,aAAa;gBACd,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBAC/C,MAAM;YACV;gBACI,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,uBAAuB,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/F,CAAC;0HA7BQ,mCAAmC;0HAAnC,mCAAmC,WAAnC,mCAAmC;8CAdhD;CA6CC;AA/B+C;6FAAnC,mCAAmC;cAD/C,wDAAU;;;;;;;;;;;;;;ACbX;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AAM3C,sBAAsB;AACiD;;;AAEvE;;GAEG;AACH;IAGI;;OAEG;IACH,qDAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAI,CAAC;IAEzE;;;;OAIG;IACH,6DAAO,GAAP,UAAQ,KAA6B;QACjC,IAAM,sBAAsB,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACnF,OAAO,IAAI,CAAC,uBAAuB,CAAC,sCAAsC,CAAC,sBAAsB,CAAC,CAAC;IACvG,CAAC;0IAfQ,2CAA2C;kIAA3C,2CAA2C,WAA3C,2CAA2C;sDAdxD;CA+BC;AAjBuD;6FAA3C,2CAA2C;cADvD,wDAAU;;;;;;;;;;;;;;ACbX;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AAM3C,sBAAsB;AACiD;;;AAEvE;;GAEG;AACH;IAKI;;OAEG;IACH,8CAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAI,CAAC;IAEzE;;;;OAIG;IACH,sDAAO,GAAP,UAAQ,KAA6B;QACjC,IAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACrD,IAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3D,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACvD,QAAQ,WAAW,EAAE;YACjB,KAAK,WAAW;gBACZ,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM;YACV,KAAK,aAAa;gBACd,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM;YACV;gBACI,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,uBAAuB,CAAC,+BAA+B,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAChH,CAAC;4HA7BQ,oCAAoC;2HAApC,oCAAoC,WAApC,oCAAoC;+CAdjD;CA6CC;AA/BgD;6FAApC,oCAAoC;cADhD,wDAAU;;;;;;;;;;;;;;ACbX;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AAM3C,sBAAsB;AACiD;;;AAEvE;;GAEG;AACH;IAGI;;OAEG;IACH,qCAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAI,CAAC;IAEzE;;;OAGG;IACH,6CAAO,GAAP,UAAQ,KAA6B;QACjC,IAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,uBAAuB,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC;IAClF,CAAC;0GAdQ,2BAA2B;kHAA3B,2BAA2B,WAA3B,2BAA2B;sCAdxC;CA8BC;AAhBuC;6FAA3B,2BAA2B;cADvC,wDAAU;;;;;;;;;;;;;;ACbX;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACqB;AAM3C,sBAAsB;AACiD;;;AAEvE;;GAEG;AACH;IAGI;;OAEG;IACH,0CAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAI,CAAC;IAEzE;;;;OAIG;IACH,kDAAO,GAAP,UAAQ,KAA6B;QACjC,IAAM,sBAAsB,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACnF,OAAO,IAAI,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,sBAAsB,CAAC,CAAC;IAC5F,CAAC;oHAfQ,gCAAgC;uHAAhC,gCAAgC,WAAhC,gCAAgC;2CAd7C;CA+BC;AAjB4C;6FAAhC,gCAAgC;cAD5C,wDAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbX,sBAAsB;AAC4B;AACO;AACwB;AACtC;AAE3C,sBAAsB;AACiD;AACP;;;;;;;;;;;;;;;;;ICKpD,4EACE;IAAA,mFAAQ;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACnC;IAAA,4DAAY;;;IAWV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,sFAAyB;IACjF,0DACF;IADE,kIACF;;;IAEF,4EACE;IAAA,4FAAiB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC5C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,sFAAyB;IACjF,0DACF;IADE,kIACF;;;IAEF,4EACE;IAAA,uFAAY;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACvC;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFyC,oFAAuB;IAC3E,0DACF;IADE,gIACF;;;IAEF,4EACE;IAAA,qFAAU;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACrC;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFmD,yFAA4B;IAC1F,0DACF;IADE,qIACF;;;IAEF,4EACE;IAAA,gGAAqB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAChD;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF2C,qFAAwB;IAC9E,0DACF;IADE,yKACF;;;IAEF,4EACE;IAAA,2FAAgB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC3C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFmD,yFAA4B;IAC1F,0DACF;IADE,qIACF;;;IAEF,4EACE;IAAA,0FAAe;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC1C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,sFAAyB;IACjF,0DACF;IADE,iIACF;;;IAEF,4EACE;IAAA,wFAAa;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACxC;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,sFAAyB;IACjF,0DACF;IADE,wIACF;;;IAEF,4EACE;IAAA,0FAAe;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC1C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF+C,uFAA0B;IACpF,0DACF;IADE,mIACF;;;IAEF,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFuC,mFAAsB;IACxE,0DACF;IADE,qKACF;;;IAEF,4EACE;IAAA,yFAAc;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACzC;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFoD,0FAA6B;IAC5F,0DACF;IADE,sIACF;;;IAEF,4EACE;IAAA,wGAA6B;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACxD;IAAA,4DAAY;;;IAMZ,4EACE;IAAA,qFAAU;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACrC;IAAA,4DAAY;;;IASZ,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IASZ,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFiD,wFAA2B;IACvF,0DACF;IADE,oIACF;;;IAEF,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IAMZ,4EACE;IAAA,kGAAuB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAClD;IAAA,4DAAY;;;IAMV,iFAEE;IAAA,uDACF;IAAA,4DAAa;;;IAFX,iGAAoC;IACpC,0DACF;IADE,6IACF;;;IAEF,4EACE;IAAA,mGAAwB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACnD;IAAA,4DAAY;;;IASZ,4EACE;IAAA,2FAAgB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC3C;IAAA,4DAAY;;;;IAShB,6EACqB;IAAnB,0UAAkB;IAAC,iEAAM;IAAA,4DAAS;;;IADM,mHAAkD;;;ADjOpG;;GAEG;AACH;IAoDE;;;;;;;;OAQG;IACH,6CAAoB,WAAwB,EAClC,KAAqB,EACrB,MAAc,EACd,uBAAgD,EAChD,eAAgC,EAChC,QAAkB;QAL5B,iBAWC;QAXmB,gBAAW,GAAX,WAAW,CAAa;QAClC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,oBAAe,GAAf,eAAe,CAAiB;QAChC,aAAQ,GAAR,QAAQ,CAAU;QAzD5B,4BAA4B;QAC5B,YAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,4BAA4B;QAC5B,YAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,wBAAwB;QACxB,oBAAe,GAAG,IAAI,CAAC;QAqDrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAA0C;YACnE,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC;YACpE,KAAI,CAAC,SAAS,EAAE,CAAC;YACjB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,kCAAkC;IAClC,uDAAS,GAAT;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC9D,QAAQ,IAAI,CAAC,WAAW,EAAE;YACxB,KAAK,WAAW;gBACd,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM;YACR,KAAK,aAAa;gBAChB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM;YACR;gBACE,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;SAC5B;IACH,CAAC;IAED;;OAEG;IACH,sDAAQ,GAAR;QACE,IAAI,CAAC,oCAAoC,EAAE,CAAC;QAC5C,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,8BAA8B,CAAC,UAAU,CAAC;YAC7C,WAAW,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,WAAW;SACrE,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,kFAAoC,GAApC;QACE,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC3D,MAAM,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACjC,WAAW,EAAE,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;YAC1C,cAAc,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACzC,UAAU,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACrC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,iBAAiB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC5C,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,aAAa,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACxC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACvC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACvC,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,aAAa,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACxC,iBAAiB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC5C,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,gBAAgB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC3C,oBAAoB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC/C,qBAAqB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAChD,sBAAsB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAClD,CAAC,CAAC;IACL,CAAC;IAED,yBAAyB;IACzB,wDAAU,GAAV;QACE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,CAAC;QAC7E,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC;QACzE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,2BAA2B,CAAC,aAAa,CAAC;QACrE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,sBAAsB,CAAC;QACnF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,kBAAkB,CAAC;QAC3E,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC;QACzE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC;QACzE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,2BAA2B,CAAC,oBAAoB,CAAC;QAC/E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,CAAC;QACvE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,sBAAsB,CAAC;QACnF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,2BAA2B,CAAC,qBAAqB,CAAC;QACjF,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC,0BAA0B,CAAC;IACjG,CAAC;IAED;;OAEG;IACH,+DAAiB,GAAjB;QAAA,iBAsBC;QArBC,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,WAAgB;YAC7F,IAAI,WAAW,KAAK,CAAC,EAAE;gBACrB,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,KAAI,CAAC,8BAA8B,CAAC,UAAU,CAAC;oBAC7C,YAAY,EAAE,KAAI,CAAC,QAAQ;oBAC3B,YAAY,EAAE,KAAI,CAAC,QAAQ;iBAC5B,CAAC,CAAC;gBACH,KAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;gBACrE,KAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;gBACrE,KAAI,CAAC,WAAW,EAAE,CAAC;aACpB;iBAAM;gBACL,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,KAAI,CAAC,8BAA8B,CAAC,UAAU,CAAC;oBAC7C,YAAY,EAAE,EAAE;oBAChB,YAAY,EAAE,EAAE;iBACjB,CAAC,CAAC;gBACH,KAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC;gBACpE,KAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,CAAC;aACrE;QACH,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,mDAAmD;IACnD,yDAAW,GAAX;QAAA,iBAMC;QALC,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,uBAAuB,CAAC,+BAA+B,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;YAChJ,KAAI,CAAC,2BAA2B,GAAG,QAAQ,CAAC;YAC5C,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,0DAAY,GAAZ,UAAa,OAAe;QAC1B,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE;gBAC7F,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC;aAC1B;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,oDAAM,GAAN;QAAA,iBAmBC;QAlBC,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QACnD,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,IAAM,uBAAuB,GAAG,kHAC1B,IAAI,CAAC,8BAA8B,CAAC,KAAK,KAC7C,UAAU;YACV,MAAM,UACN,cAAc,EAAE,SAAS,EACzB,YAAY,EAAE,IAAI,CAAC,QAAQ,EAC3B,YAAY,EAAE,IAAI,CAAC,QAAQ,EAC3B,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,EACnG,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,EACnG,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,oBAAoB,EAAE,SAAS,CAAC,GACzH,CAAC;QACF,OAAO,uBAAuB,CAAC,aAAa,CAAC,CAAC;QAC9C,OAAO,uBAAuB,CAAC,WAAW,CAAC,CAAC;QAC5C,IAAI,CAAC,uBAAuB,CAAC,0BAA0B,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;YACvG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,EAAE,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC;0HAtNU,mCAAmC;uHAAnC,mCAAmC;YClBhD,yEAEE;YAAA;YAAA,2EAEE;YAAA;YAAA,0EAEE;YAAA;YAAA,mFAEE;YAAA;YAAA,yEAEE;YAAA;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,gEAAI;YAAA,4DAAY;YAC3B;YAAA,uEACA;YAAA;YAAA,6IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,qEAAS;YAAA,4DAAY;YAChC;YAAA,uEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,gEAAI;YAAA,4DAAY;YAC3B;YAAA,iFACE;YADkD,oLAAmB,iBAAa,IAAC;YACnF;YAAA,+IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,6IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,oEAAQ;YAAA,4DAAY;YAC/B;YAAA,iFACE;YAAA;YAAA,+IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,6IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,kEAAM;YAAA,4DAAY;YAC7B;YAAA,kFACE;YAAA;YAAA,+IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,6IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,6EAAiB;YAAA,4DAAY;YACxC;YAAA,kFACE;YADqD,oLAAmB,iBAAa,IAAC;YACtF;YAAA,+IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,6IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,wEAAY;YAAA,4DAAY;YACnC;YAAA,kFACE;YADmD,oLAAmB,iBAAa,IAAC;YACpF;YAAA,+IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,6IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,uEAAW;YAAA,4DAAY;YAClC;YAAA,kFACE;YAAA;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,sEAAS;YAAA,4DAAY;YAChC;YAAA,mFACE;YADgD,qLAAmB,iBAAa,IAAC;YACjF;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,wEAAW;YAAA,4DAAY;YAClC;YAAA,mFACE;YADgD,qLAAmB,iBAAa,IAAC;YACjF;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,4EAAe;YAAA,4DAAY;YACtC;YAAA,mFACE;YADmD,qLAAmB,iBAAa,IAAC;YACpF;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,uEAAU;YAAA,4DAAY;YACjC;YAAA,mFACE;YADiD,qLAAmB,iBAAa,IAAC;YAClF;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,sFAAyB;YAAA,4DAAY;YAChD;YAAA,mFACE;YAAA;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,mEAAM;YAAA,4DAAY;YAC7B;YAAA,yEACA;YAAA;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,0EAAa;YAAA,4DAAY;YACpC;YAAA,yEAEA;YAAA;YAAA,yFAAqF;YACrF;YAAA,wFAAsD;YACtD;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,wEAAW;YAAA,4DAAY;YAClC;YAAA,yEAEA;YAAA;YAAA,yFAAqF;YACrF;YAAA,wFAAsD;YACtD;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,4EAAe;YAAA,4DAAY;YACtC;YAAA,mFACE;YAAA;YAAA,iJACE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,qEAAQ;YAAA,4DAAY;YAC/B;YAAA,yEACA;YAAA;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,iFAAoB;YAAA,4DAAY;YAC3C;YAAA,mFACE;YAAA;YAAA,iJAEE;YAEJ;YAAA,4DAAa;YACb;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,yEAAY;YAAA,4DAAY;YACnC;YAAA,yEAEA;YAAA;YAAA,yFAAgG;YAChG;YAAA,wFAAiE;YACjE;YAAA,+IACE;YAEJ;YAAA,4DAAiB;YAEnB;YAAA,4DAAM;YAER;YAAA,4DAAmB;YAEnB;YAAA,yFACE;YAAA;YAAA,+EAA+D;YAAA,mEAAM;YAAA,4DAAS;YAC9E;YAAA,0IACqB;YACvB;YAAA,4DAAmB;YAErB;YAAA,4DAAO;YAET;YAAA,4DAAW;YAEb;YAAA,4DAAM;YACN;;;;;YAhPU,0DAA4C;YAA5C,yGAA4C;YAS/B,2DAAyE;YAAzE,uIAAyE;YAatE,2DAA6C;YAA7C,yFAA6C;YAIhD,0DAAiF;YAAjF,+IAAiF;YAQ9E,2DAA6C;YAA7C,yFAA6C;YAIhD,0DAA6E;YAA7E,2IAA6E;YAQ1E,2DAAyC;YAAzC,uFAAyC;YAI5C,0DAA2E;YAA3E,yIAA2E;YAQxE,2DAAmD;YAAnD,4FAAmD;YAItD,0DAAoF;YAApF,kJAAoF;YAQjF,2DAA2C;YAA3C,wFAA2C;YAI9C,0DAAkF;YAAlF,gJAAkF;YAQ/E,2DAAmD;YAAnD,4FAAmD;YAItD,0DAAgF;YAAhF,8IAAgF;YAQ7E,2DAA6C;YAA7C,yFAA6C;YAIhD,0DAA+E;YAA/E,6IAA+E;YAQ5E,2DAA6C;YAA7C,yFAA6C;YAIhD,0DAA+E;YAA/E,6IAA+E;YAQ5E,2DAA+C;YAA/C,0FAA+C;YAIlD,0DAAkF;YAAlF,gJAAkF;YAQ/E,2DAAuC;YAAvC,sFAAuC;YAI1C,0DAAgF;YAAhF,8IAAgF;YAQ7E,2DAAoD;YAApD,4FAAoD;YAIvD,0DAAoF;YAApF,kJAAoF;YAQpF,2DAA2E;YAA3E,yIAA2E;YAOtE,0DAAe;YAAf,4EAAe;YAEE,0DAA2B;YAA3B,qEAA2B;YAEjD,0DAA8E;YAA9E,4IAA8E;YAOzE,0DAAe;YAAf,4EAAe;YAEE,0DAA2B;YAA3B,qEAA2B;YAEjD,0DAA8E;YAA9E,4IAA8E;YAQ3E,2DAAiD;YAAjD,2FAAiD;YAIpD,0DAAmF;YAAnF,iJAAmF;YAQnF,2DAAuF;YAAvF,qJAAuF;YAQpF,2DAAmE;YAAnE,oGAAmE;YAKtE,0DAAwF;YAAxF,sJAAwF;YAO1E,0DAAe;YAAf,4EAAe;YAEP,0DAAsC;YAAtC,qEAAsC;YAE5D,0DAAyF;YAAzF,uJAAyF;YAUhE,0DAAsB;YAAtB,8IAAsB;YAC+B,0DAAmD;YAAnD,6GAAmD;;8CD3OxJ;CA0OC;AAxN+C;6FAAnC,mCAAmC;cAL/C,uDAAS;eAAC;gBACT,QAAQ,EAAE,qCAAqC;gBAC/C,WAAW,EAAE,+CAA+C;gBAC5D,SAAS,EAAE,CAAC,+CAA+C,CAAC;aAC7D;;;;;;;;;;;;;;AEjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AAC4B;AACO;AACwB;AACtC;AAE3C,sBAAsB;AACiD;AACP;;;;;;;;;;;;;;;;;ICyBlD,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,sFAAyB;IACjF,0DACF;IADE,kIACF;;;IAEF,4EACE;IAAA,uFAAY;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACvC;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFyC,oFAAuB;IAC3E,0DACF;IADE,gIACF;;;IAEF,4EACE;IAAA,qFAAU;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACrC;IAAA,4DAAY;;;IAoCV,iFAEE;IAAA,uDACF;IAAA,4DAAa;;;IAFX,0FAA6B;IAC7B,0DACF;IADE,sIACF;;;IAeF,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IASZ,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFiD,wFAA2B;IACvF,0DACF;IADE,oIACF;;;IAEF,4EACE;IAAA,8FAAmB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC9C;IAAA,4DAAY;;;IAWV,iFAEE;IAAA,uDACF;IAAA,4DAAa;;;IAFX,iGAAoC;IACpC,0DACF;IADE,6IACF;;;;IAkBN,6EACuE;IAAvE,wUAAkB;IAAqD,iEAAM;IAAA,4DAAS;;;IAD5C,iHAAgD;;;ADxJlG;;GAEG;AACH;IA8BE;;;;;;;;OAQG;IACH,2CAAoB,WAAwB,EAClC,KAAqB,EACrB,MAAc,EACd,uBAAgD,EAChD,eAAgC,EAChC,QAAkB;QAL5B,iBAcC;QAdmB,gBAAW,GAAX,WAAW,CAAa;QAClC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,oBAAe,GAAf,eAAe,CAAiB;QAChC,aAAQ,GAAR,QAAQ,CAAU;QAjC5B,wBAAwB;QACxB,oBAAe,GAAG,KAAK,CAAC;QAaxB,4BAA4B;QAC5B,YAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,4BAA4B;QAC5B,YAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QAiBnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAAkD;YAC3E,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,mCAAmC,CAAC;YACzE,KAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,mCAAmC,CAAC,EAAE,CAAC;YAC1E,IAAI,KAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,EAAE,KAAK,KAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAC7F,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;aAC9B;YACD,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,oDAAQ,GAAR;QACE,IAAI,CAAC,kCAAkC,EAAE,CAAC;QAC1C,IAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/B,IAAM,CAAC,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,EAAE;YACtD,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC;YAC3C,MAAM,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI;YAC1C,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,WAAW;YACjE,MAAM,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;YACxD,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE;YACrD,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE;YACjD,iBAAiB,EAAE,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,KAAK;YACtE,aAAa,EAAE,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,WAAW;YACpE,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa;YACnE,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,IAAI;YACvD,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,WAAW;YAChE,eAAe,EAAE,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,KAAK;YAClE,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,WAAW;YAChE,iBAAiB,EAAE,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,EAAE;YACnE,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,MAAM;YAC9C,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;YACzG,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC;YACzG,gBAAgB,EAAE,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,EAAE;YACjE,oBAAoB,EAAE,IAAI,CAAC,wBAAwB,CAAC,kBAAkB;YACtE,qBAAqB,EAAE,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,EAAE;YAC3E,sBAAsB,EAAE,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC;SAC3I,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,8EAAkC,GAAlC;QACE,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACzD,MAAM,EAAE,CAAC,EAAC,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;YACrC,WAAW,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAC5C,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YACvC,UAAU,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACrC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,iBAAiB,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAClD,aAAa,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAC9C,aAAa,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAC9C,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAC3C,YAAY,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAC7C,eAAe,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAChD,WAAW,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAC5C,iBAAiB,EAAE,EAAE;YACrB,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,WAAW,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtC,gBAAgB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC3C,oBAAoB,EAAE,EAAE;YACxB,qBAAqB,EAAE,EAAE;YACzB,sBAAsB,EAAE,EAAE;SAC3B,CAAC,CAAC;IACL,CAAC;IAED,sDAAU,GAAV;QACE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC;QACtE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC;QAClE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,CAAC;QAChF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,CAAC;QAC9E,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,wBAAwB,CAAC,0BAA0B,CAAC;IAC9F,CAAC;IAED;;OAEG;IACH,kDAAM,GAAN;QAAA,iBAqBC;QApBC,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QACnD,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,IAAM,uBAAuB,GAAG;YAC9B,MAAM,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,MAAM;YACtD,UAAU;YACV,eAAe,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,eAAe;YACxE,MAAM;YACN,cAAc,EAAE,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,QAAQ;YAC1D,mBAAmB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,mBAAmB;YAChF,kBAAkB,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,kBAAkB;YAC9E,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,oBAAoB,EAAE,SAAS,CAAC;YACtH,cAAc,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,cAAc;YACtE,MAAM,EAAE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,MAAM;YACtD,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC;YACjG,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC;SAClG,CAAC;QACF,IAAI,CAAC,uBAAuB,CAAC,8BAA8B,CAAC,IAAI,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;YACxI,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,UAAU,EAAE,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACL,CAAC;sHAhJU,iCAAiC;qHAAjC,iCAAiC;YClB9C,yEAEE;YAAA;YAAA,2EAEE;YAAA;YAAA,0EAEE;YAAA;YAAA,mFAEE;YAAA;YAAA,yEAEE;YAAA;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,gEAAI;YAAA,4DAAY;YAC3B;YAAA,uEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,qEAAS;YAAA,4DAAY;YAChC;YAAA,uEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,gEAAI;YAAA,4DAAY;YAC3B;YAAA,uEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,6EAAiB;YAAA,4DAAY;YACxC;YAAA,uEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,oEAAQ;YAAA,4DAAY;YAC/B;YAAA,iFACE;YAAA;YAAA,6IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,4IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,kEAAM;YAAA,4DAAY;YAC7B;YAAA,kFACE;YAAA;YAAA,6IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,4IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,wEAAY;YAAA,4DAAY;YACnC;YAAA,wEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,uEAAW;YAAA,4DAAY;YAClC;YAAA,wEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,qEAAS;YAAA,4DAAY;YAChC;YAAA,wEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,uEAAW;YAAA,4DAAY;YAClC;YAAA,wEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,4EAAe;YAAA,4DAAY;YACtC;YAAA,yEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,uEAAU;YAAA,4DAAY;YACjC;YAAA,yEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,sFAAyB;YAAA,4DAAY;YAChD;YAAA,mFACE;YAAA;YAAA,+IAEE;YAEJ;YAAA,4DAAa;YACf;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,mEAAM;YAAA,4DAAY;YAC7B;YAAA,yEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,0EAAa;YAAA,4DAAY;YACpC;YAAA,yEAEA;YAAA;YAAA,yFAAqF;YACrF;YAAA,wFAAsD;YACtD;YAAA,8IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,wEAAW;YAAA,4DAAY;YAClC;YAAA,yEAEA;YAAA;YAAA,yFAAqF;YACrF;YAAA,wFAAsD;YACtD;YAAA,8IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,4EAAe;YAAA,4DAAY;YACtC;YAAA,mFACE;YAAA;YAAA,+IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,8IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,qEAAQ;YAAA,4DAAY;YAC/B;YAAA,yEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,iFAAoB;YAAA,4DAAY;YAC3C;YAAA,mFACE;YAAA;YAAA,+IAEE;YAEJ;YAAA,4DAAa;YACf;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,yEAAY;YAAA,4DAAY;YACnC;YAAA,yEAEA;YAAA;YAAA,yFAAgG;YAChG;YAAA,wFAAiE;YACnE;YAAA,4DAAiB;YAEnB;YAAA,4DAAM;YAER;YAAA,4DAAmB;YAEnB;YAAA,yFACE;YAAA;YAAA,+EAAmE;YAAA,mEAAM;YAAA,4DAAS;YAClF;YAAA,wIACuE;YACzE;YAAA,4DAAmB;YAErB;YAAA,4DAAO;YAET;YAAA,4DAAW;YAEb;YAAA,4DAAM;YACN;;;;;YAvKU,0DAA0C;YAA1C,uGAA0C;YA6B1B,2DAA6C;YAA7C,yFAA6C;YAIhD,0DAA2E;YAA3E,yIAA2E;YAQxE,2DAAyC;YAAzC,uFAAyC;YAI5C,0DAAyE;YAAzE,uIAAyE;YAsCtE,2DAAoD;YAApD,4FAAoD;YAclD,2DAAe;YAAf,4EAAe;YAEE,0DAA2B;YAA3B,oEAA2B;YAEjD,0DAA4E;YAA5E,0IAA4E;YAOvE,0DAAe;YAAf,4EAAe;YAEE,0DAA2B;YAA3B,oEAA2B;YAEjD,0DAA4E;YAA5E,0IAA4E;YAQzE,2DAAiD;YAAjD,2FAAiD;YAIpD,0DAAiF;YAAjF,+IAAiF;YAa9E,2DAAmE;YAAnE,oGAAmE;YASjE,0DAAe;YAAf,4EAAe;YAEE,0DAAsC;YAAtC,qEAAsC;YASnC,2DAA0B;YAA1B,8IAA0B;YAE/C,0DAAmD;YAAnD,6GAAmD;;4CDnK9E;CAoKC;AAlJ6C;6FAAjC,iCAAiC;cAL7C,uDAAS;eAAC;gBACT,QAAQ,EAAE,mCAAmC;gBAC7C,WAAW,EAAE,6CAA6C;gBAC1D,SAAS,EAAE,CAAC,6CAA6C,CAAC;aAC3D;;;;;;;;;;;;;;AEjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACuC;AACR;AACM;AACY;AACtB;AACJ;AAE7C,sBAAsB;AACiD;AAEvE,wBAAwB;AACiE;AACzB;;;;;;;;;;;;;;;;;;;;;;ICT5D,0EACE;IAAA;IAAA,2EACE;IAAA;IAAA,yEAAmB;IAAA,sEAAW;IAAA,4DAAK;IACrC;IAAA,4DAAO;IACP;IAAA,2EACE;IAAA;IAAA,0EAAmB;IAAA,wDAAgB;IAAA,4DAAK;IAC1C;IAAA,4DAAO;IACT;IAAA,4DAAM;;;IAFiB,2DAAgB;IAAhB,kFAAgB;;;IAIvC,0EACE;IAAA;IAAA,oFACE;IAAA;IAAA,uEACF;IAAA;IAAA,4DAAiB;IACjB;IAAA,oFACE;IAAA;IAAA,uEACF;IAAA;IAAA,4DAAiB;IACnB;IAAA,4DAAM;;;IALuC,0DAAiC;IAAjC,iGAAiC;IAG7B,0DAA4B;IAA5B,4FAA4B;;;IASzE,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFkD,0FAA6B;IAC1F,0DACF;IADE,0HACF;;;;IAQJ,6EACE;IAD0F,2VAAsC;IAChI,2FACF;IAAA,4DAAS;;;IAOP,yEAAuC;IAAA,mEAAO;IAAA,4DAAK;;;IACnD,yEAA2C;IAAA,uDAC3C;IAAA,4DAAK;;;IADsC,0DAC3C;IAD2C,4JAC3C;;;IAIA,yEAAuC;IAAA,yEAAa;IAAA,4DAAK;;;IACzD,yEAA2C;IAAA,uDACF;IAAA,4DAAK;;;IADH,0DACF;IADE,sKACF;;;IAIzC,yEAAuC;IAAA,wEAAY;IAAA,4DAAK;;;IACxD,yEAA2C;IAAA,uDAAoC;IAAA,4DAAK;;;IAAzC,0DAAoC;IAApC,qGAAoC;;;IAI/E,yEAAuC;IAAA,uEAAW;IAAA,4DAAK;;;IACvD,yEAA2C;IAAA,uDACJ;IAAA,4DAAK;;;IADD,0DACJ;IADI,kKACJ;;;IAIvC,yEAAuC;IAAA,mEAAO;IAAA,4DAAK;;;IACnD,yEAA2C;IAAA,uDAA4D;IAAA,4DAAK;;;IAAjE,0DAA4D;IAA5D,4IAA4D;;;IAIvG,yEAAuC;IAAA,qEAAS;IAAA,4DAAK;;;IACrD,yEAA2C;IAAA,uDAC3C;;;IAAA,4DAAK;;;IADsC,0DAC3C;IAD2C,gRAC3C;;;IAIA,yEAAuC;IAAA,oEAAQ;IAAA,4DAAK;;;;IAGhD,6EAGE;IAAA;IAAA,mEAA0B;IAC5B;IAAA,4DAAS;;;IAFP,iKAA8C;;;IAHlD,uEACE;IAAA;IAAA,iJAGE;IAEJ;IAAA,4DAAO;;IAJH,0DAAmD;IAAnD,6GAAmD;;;;IAMrD,6EAEE;IADoD,wdAAmD;IACvG;IAAA,mEAA2B;IAC7B;IAAA,4DAAS;;;IAJX,uEACE;IAAA;IAAA,iJAEE;IAEJ;IAAA,4DAAO;;IAHH,0DAAmD;IAAnD,6GAAmD;;;;IAIvD,6EAGE;IAAA;IAAA,mEAAyB;IAC3B;IAAA,4DAAS;;;IAFP,iKAA8C;;;IAhBlD,yEACE;IAAA;IAAA,sIACE;IAMF;IAAA,sIACE;IAKF;IAAA,0IAGE;IAEJ;IAAA,4DAAK;;;IAlBG,0DAA4C;IAA5C,4GAA4C;IAO5C,0DAA4C;IAA5C,4GAA4C;IAOhD,0DAAiD;IAAjD,2GAAiD;;;IAOvD,oEAA4D;;;IAC5D,oEAAkE;;;ADzFtE;;GAEG;AACH;IA0CE;;;;;;OAMG;IACH,2CAAoB,KAAqB,EAC/B,uBAAgD,EAChD,eAAgC,EAChC,MAAiB;QAH3B,iBAaC;QAbmB,UAAK,GAAL,KAAK,CAAgB;QAC/B,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,oBAAe,GAAf,eAAe,CAAiB;QAChC,WAAM,GAAN,MAAM,CAAW;QAzC3B,yBAAyB;QACzB,iBAAY,GAAG,IAAI,0DAAW,EAAE,CAAC;QACjC,+BAA+B;QAC/B,kBAAa,GAAG,IAAI,0DAAW,EAAE,CAAC;QAClC,yBAAyB;QACzB,sBAAiB,GAAG,IAAI,0DAAW,EAAE,CAAC;QACtC,+BAA+B;QAC/B,iBAAY,GAAG,IAAI,0DAAW,EAAE,CAAC;QAajC,0CAA0C;QAC1C,eAAU,GAAG,IAAI,0EAAkB,EAAE,CAAC;QACtC,qDAAqD;QACrD,qBAAgB,GAAa,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAmBlH,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAA0C;YACnE,KAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,2BAA2B,CAAC;YACxE,IAAI,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE;gBAC/C,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,+BAA+B,CAAC,UAAU,CAAC,WAAW,CAAC;gBAC9E,KAAI,CAAC,uBAAuB,EAAE,CAAC;aAChC;YACD,KAAI,CAAC,SAAS,EAAE,CAAC;YACjB,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,+BAA+B,CAAC,mBAAmB,CAAC;QACpF,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oDAAQ,GAAR;IACA,CAAC;IAED,qDAAS,GAAT;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAClE,QAAQ,IAAI,CAAC,WAAW,EAAE;YACxB,KAAK,WAAW;gBACd,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM;YACR,KAAK,aAAa;gBAChB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,MAAM;YACR;gBACE,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;SAC5B;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1F,CAAC;IAED,sEAA0B,GAA1B;QACE,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,mEAAuB,GAAvB;QAAA,iBAmBC;QAlBC,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QACnD,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,IAAM,UAAU,GAAG;YACjB,QAAQ,EAAG,IAAI,CAAC,+BAA+B,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK;YACxF,UAAU,EAAE,IAAI,CAAC,+BAA+B,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK;YACvG,MAAM;YACN,UAAU;YACV,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,CAAC;YACT,eAAe,EAAE,IAAI,CAAC,aAAa;YACnC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK;YACvC,gBAAgB,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK;SAC1C,CAAC;QACF,IAAI,CAAC,uBAAuB,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;YACvF,KAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,SAAS,CAAC;YAC3C,KAAI,CAAC,UAAU,CAAC,IAAI,GAAG,KAAI,CAAC,gBAAgB,CAAC;YAC7C,KAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4CAA4C;IAC5C,qEAAyB,GAAzB,UAA0B,aAAkB;QAA5C,iBAUC;QATC,IAAM,kCAAkC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sGAAqB,EAAE;YACjF,IAAI,EAAE,EAAE,aAAa,EAAE,8BAA4B,aAAe,EAAE;SACrE,CAAC,CAAC;QACH,kCAAkC,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,QAAa;YACvE,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,KAAI,CAAC,uBAAuB,CAAC,yBAAyB,CAAC,aAAa,CAAC;qBAClE,SAAS,CAAC,cAAO,CAAC,CAAC,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;sHApHU,iCAAiC;qHAAjC,iCAAiC;;4EAkCjC,wEAAY;;;;;;YCzDzB,8EAEE;YAAA;YAAA,yEAEE;YAAA;YAAA,8HACE;YAQF;YAAA,8HACE;YAQF;YAAA,4EAA0C;YAE1C;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,gEAAI;YAAA,4DAAY;YAC3B;YAAA,iFACE;YAAA;YAAA,6IACE;YAEJ;YAAA,4DAAa;YACf;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,uEACF;YAAA;YAAA,4DAAiB;YAEjB;YAAA,qIACE;YAEJ;YAAA,4DAAM;YAGN;YAAA,gFAEE;YAAA;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HAA2C;YAE7C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HAA2C;YAE7C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HAA2C;YAC7C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HAA2C;YAE7C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HAA2C;YAC7C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HAA2C;YAE7C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,8HAAuC;YACvC;YAAA,8HACE;YAmBJ;YAAA,qEAAe;YAEf;YAAA,8HAAuD;YACvD;YAAA,8HAA6D;YAE/D;YAAA,4DAAQ;YAER;YAAA,gFAA0G;YAE5G;YAAA,4DAAW;YACX;;YA3GoB,0DAAoB;YAApB,kFAAoB;YASpB,0DAAqB;YAArB,mFAAqB;YASxB,0DAAc;YAAd,uEAAc;YAIb,0DAA4B;YAA5B,yFAA4B;YAC1B,0DAAkD;YAAlD,0FAAkD;YAOlB,0DAA6B;YAA7B,0FAA6B;YAGnC,0DAAiD;YAAjD,2GAAiD;YAMzD,0DAAyB;YAAzB,sFAAyB;YA4DxC,2DAAmC;YAAnC,iGAAmC;YAC1C,0DAAgD;YAAhD,kGAAgD;YAI/C,0DAAe;YAAf,wEAAe;;4CD5GhC;CA6IC;AAtH6C;6FAAjC,iCAAiC;cAL7C,uDAAS;eAAC;gBACT,QAAQ,EAAE,mCAAmC;gBAC7C,WAAW,EAAE,6CAA6C;gBAC1D,SAAS,EAAE,CAAC,6CAA6C,CAAC;aAC3D;;kBAiCE,uDAAS;mBAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;kBAE/C,uDAAS;mBAAC,wEAAY,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;;;;;;;;;;;;AEzD3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACuC;AAEF;AACY;AACtB;;;;;;;;;ICwC3C,yEAAuC;IAAA,6EAAiB;IAAA,4DAAK;;;IAC7D,yEAA4C;IAAA,uDAAsC;;IAAA,4DAAK;;;IAA3C,0DAAsC;IAAtC,yKAAsC;;;IAIlF,yEAAuC;IAAA,mEAAO;IAAA,4DAAK;;;IACnD,yEAA4C;IAAA,uDAAiC;IAAA,4DAAK;;;IAAtC,0DAAiC;IAAjC,0GAAiC;;;IAI7E,yEAAuC;IAAA,kEAAM;IAAA,4DAAK;;;IAClD,yEAA4C;IAAA,uDAAsC;IAAA,4DAAK;;;IAA3C,0DAAsC;IAAtC,+GAAsC;;;IAIlF,yEAAuC;IAAA,qEAAS;IAAA,4DAAK;;;IACrD,yEAA4C;IAAA,uDAA0C;IAAA,4DAAK;;;IAA/C,0DAA0C;IAA1C,mHAA0C;;;IAGxF,oEAA4D;;;IAC5D,yEACA;IAAA;IAAA,4DAAK;;;ADpDT;;GAEG;AACH;IAkBE;;;OAGG;IACH,mCAAoB,KAAqB;QAAzC,iBAMC;QANmB,UAAK,GAAL,KAAK,CAAgB;QAZzC,0CAA0C;QAC1C,eAAU,GAAG,IAAI,0EAAkB,EAAE,CAAC;QACtC,qDAAqD;QACrD,qBAAgB,GAAa,CAAC,iBAAiB,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QAU9E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAAkC;YAC3D,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACpD,KAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,KAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC1F,KAAI,CAAC,UAAU,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC;sGAvBU,yBAAyB;6GAAzB,yBAAyB;4EAWzB,wEAAY;;;;;YCjCzB,yEAEE;YAAA;YAAA,8EAEE;YAAA;YAAA,mFAEE;YAAA;YAAA,yEAEE;YAAA;YAAA,yEACE;YAAA,6FACF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA,wDACF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA,4FACF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA,wDACF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA,6FACF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA,wDACF;YAAA,4DAAM;YAER;YAAA,4DAAM;YAER;YAAA,4DAAmB;YAErB;YAAA,4DAAW;YAEb;YAAA,4DAAM;YAEN;YAAA,0EAEE;YAAA;YAAA,4EAEE;YAAA;YAAA,4EACE;YAAA;YAAA,qHAAuC;YACvC;YAAA,qHAA4C;YAC9C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,qHAAuC;YACvC;YAAA,qHAA4C;YAC9C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,qHAAuC;YACvC;YAAA,qHAA4C;YAC9C;YAAA,qEAAe;YAEf;YAAA,6EACE;YAAA;YAAA,qHAAuC;YACvC;YAAA,qHAA4C;YAC9C;YAAA,qEAAe;YAEf;YAAA,sHAAuD;YACvD;YAAA,sHACA;YAEF;YAAA,4DAAQ;YAER;YAAA,gFAA6F;YAE/F;YAAA,4DAAM;YACN;;YA5DU,2DACF;YADE,kMACF;YAOE,0DACF;YADE,8LACF;YAOE,0DACF;YADE,4IACF;YAYW,0DAAyB;YAAzB,sFAAyB;YAsBrB,2DAAmC;YAAnC,iGAAmC;YAC1C,0DAAgD;YAAhD,kGAAgD;YAK/C,0DAAwC;YAAxC,kJAAwC;;oCDtEzD;CA+CC;AAzBqC;6FAAzB,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,oCAAoC,CAAC;aAClD;;kBAYE,uDAAS;mBAAC,wEAAY,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEjC3C,sBAAsB;AAC2C;AACR;AACW;AACzB;AAE3C,sBAAsB;AACiD;AACP;AACH;;;;;;;;;;;;;;;;;;;;IC0C/C,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,sFAAyB;IACjF,0DACF;IADE,iIACF;;;IAEF,4EACE;IAAA,qFAAU;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACrC;IAAA,4DAAY;;;IAMZ,4EACE;IAAA,qFAAU;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACrC;IAAA,4DAAY;;;IAIZ,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFkC,6EAAgB;IAC7D,0DACF;IADE,oJACF;;;IAME,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF+C,uFAA0B;IACpF,0DACF;IADE,mIACF;;;IAEF,4EACE;IAAA,2FAAgB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAC3C;IAAA,4DAAY;;;IAMV,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFuC,mFAAsB;IACxE,0DACF;IADE,qKACF;;;IAEF,4EACE;IAAA,sFAAW;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACtC;IAAA,4DAAY;;;IAMZ,4EACE;IAAA,qFAAU;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACrC;IAAA,4DAAY;;;IASZ,4EACE;IAAA,gGAAqB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IAChD;IAAA,4DAAY;;;IAMZ,4EACE;IAAA,mGAAwB;IAAA,yEAAQ;IAAA,mEAAQ;IAAA,4DAAS;IACnD;IAAA,4DAAY;;;;IAYlB,6EACqB;IAAnB,oUAAkB;IAAC,iEAAM;IAAA,4DAAS;;;IADM,4GAA2C;;;AD1H3F;;GAEG;AACH;IAgCE;;;;;;;;;OASG;IACH,uCAAoB,WAAwB,EAClC,KAAqB,EACrB,MAAc,EACd,uBAAgD,EAChD,QAAkB,EAClB,eAAgC,EAChC,cAA8B;QANxC,iBAYC;QAZmB,gBAAW,GAAX,WAAW,CAAa;QAClC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,aAAQ,GAAR,QAAQ,CAAU;QAClB,oBAAe,GAAf,eAAe,CAAiB;QAChC,mBAAc,GAAd,cAAc,CAAgB;QAvCxC,4BAA4B;QAC5B,YAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/B,4BAA4B;QAC5B,YAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAqC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAAsC;YAC/D,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,uBAAuB,CAAC;YAChE,KAAI,CAAC,SAAS,EAAE,CAAC;YACjB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD,kCAAkC;IAClC,iDAAS,GAAT;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAClE,QAAQ,IAAI,CAAC,WAAW,EAAE;YACxB,KAAK,WAAW;gBACd,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACpD,MAAM;YACR,KAAK,aAAa;gBAChB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;gBACzB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACvD,MAAM;YACR;gBACE,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;SAC5B;IACH,CAAC;IAED;;OAEG;IACH,gDAAQ,GAAR;QACE,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,qEAA6B,GAA7B;QACE,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACpD,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACvC,YAAY,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACvC,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC1C,aAAa,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACxC,gBAAgB,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,cAAc,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACxF,cAAc,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACzC,qBAAqB,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACjD,CAAC,CAAC;IACL,CAAC;IAED,yBAAyB;IACzB,kDAAU,GAAV;QACE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC;QACzE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,2BAA2B,CAAC,oBAAoB,CAAC;QAC/E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,CAAC;IACzE,CAAC;IAED,mDAAmD;IACnD,mDAAW,GAAX;QAAA,iBAOC;QANC,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,uBAAuB,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;YACrH,KAAI,CAAC,2BAA2B,GAAG,QAAQ,CAAC;YAC5C,KAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,eAAe,CAAC;YACjD,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,oDAAY,GAAZ,UAAa,OAAgG;QAC3G,OAAO,OAAO,CAAC,cAAc,CAAC;QAC9B,OAAO,OAAO,CAAC,YAAY,CAAC;QAC5B,OAAO,OAAO,CAAC,mBAAmB,CAAC;QACnC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;SAC5C;QACD,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE;gBAC7F,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC;aAC1B;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,uDAAe,GAAf;QAAA,iBAUC;QATC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,KAAa;YACpF,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;gBACrB,KAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,aAAa,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;qBACtE,SAAS,CAAC,UAAC,IAAS;oBACnB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;gBACpC,CAAC,CAAC,CAAC;gBACL,KAAI,CAAC,WAAW,EAAE,CAAC;aACpB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,qDAAa,GAAb,UAAc,MAAW;QACvB,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,8CAAM,GAAN;QAAA,iBAiBC;QAhBC,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QACnD,IAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;QAClD,IAAM,uBAAuB,GAAG,kHAC1B,IAAI,CAAC,uBAAuB,CAAC,KAAK,KACtC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,YAAY,EAAE,UAAU,CAAC,EAClG,UAAU;YACV,MAAM,UACN,UAAU,EAAE,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EACrE,aAAa,EAAE,IAAI,CAAC,EAAE,EACtB,eAAe,EAAE,IAAI,CAAC,aAAa,EACnC,YAAY,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE,EAC5D,YAAY,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,QAAQ,GACnE,CAAC;QACF,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC;YACpF,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,EAAE,EAAE,UAAU,EAAE,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;8GA1KU,6BAA6B;iHAA7B,6BAA6B;YCpB1C,yEAEE;YAAA;YAAA,2EAEE;YAAA;YAAA,mFAEE;YAAA;YAAA,yEAEE;YAAA;YAAA,wEAA8B;YAAA,oFAAyB;YAAA,4DAAK;YAE5D;YAAA,6EAA0C;YAE1C;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,qEAAS;YAAA,4DAAO;YACnC;YAAA,2EAAmB;YAAA,wDAAwD;YAAA,4DAAO;YACpF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,kEAAM;YAAA,4DAAO;YAChC;YAAA,2EAAmB;YAAA,wDAAiD;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,wEAAY;YAAA,4DAAO;YACtC;YAAA,2EACe;YAAA,wDAA6H;YAAA,4DAAO;YACrJ;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,6EAAiB;YAAA,4DAAO;YAC3C;YAAA,2EAAmB;YAAA,wDAAuD;YAAA,4DAAO;YACnF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,oEAAQ;YAAA,4DAAO;YAClC;YAAA,2EAAmB;YAAA,wDAA+C;YAAA,4DAAO;YAC3E;YAAA,4DAAM;YAER;YAAA,4DAAM;YAEN;YAAA,yEAA8B;YAAA,2EAAe;YAAA,4DAAK;YAElD;YAAA,6EAA0C;YAE1C;YAAA,2EAEE;YAAA;YAAA,0EAEE;YAAA;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,kEAAM;YAAA,4DAAY;YAC7B;YAAA,kFACE;YADgD,8KAAmB,iBAAa,IAAC;YACjF;YAAA,0IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,wIACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,kEAAM;YAAA,4DAAY;YAC7B;YAAA,wEACA;YAAA;YAAA,wIACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,4FACE;YAAA;YAAA,0IACE;YAEJ;YAAA,4DAAmB;YAEnB;YAAA,qFACE;YAAA;YAAA,6EAAW;YAAA,yEAAY;YAAA,4DAAY;YACnC;YAAA,mFACE;YADmD,+KAAmB,iBAAa,IAAC;YACpF;YAAA,4IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,0IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,oEAAO;YAAA,4DAAY;YAC9B;YAAA,mFACE;YADiD,+KAAmB,iBAAa,IAAC;YAClF;YAAA,4IACE;YAEJ;YAAA,4DAAa;YACb;YAAA,0IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,mEAAM;YAAA,4DAAY;YAC7B;YAAA,yEACA;YAAA;YAAA,0IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,6EAAgB;YAAA,4DAAY;YACvC;YAAA,yEAEA;YAAA;YAAA,yFAAoF;YACpF;YAAA,wFAAqD;YACrD;YAAA,0IACE;YAEJ;YAAA,4DAAiB;YAEjB;YAAA,sFACE;YAAA;YAAA,8EAAW;YAAA,wEAAW;YAAA,4DAAY;YAClC;YAAA,4EAAoE;YACpE;YAAA,0IACE;YAGJ;YAAA,4DAAiB;YAEnB;YAAA,4DAAM;YAER;YAAA,4DAAO;YAET;YAAA,4DAAmB;YAEnB;YAAA,yFACE;YAAA;YAAA,+EAAyE;YAAA,mEAAM;YAAA,4DAAS;YACxF;YAAA,oIACqB;YACvB;YAAA,4DAAmB;YAErB;YAAA,4DAAW;YAEb;YAAA,4DAAM;YACN;;;;YAnIqB,2DAAc;YAAd,uEAAc;YAIN,0DAAwD;YAAxD,uHAAwD;YAKxD,0DAAiD;YAAjD,gHAAiD;YAMrD,0DAA6H;YAA7H,0MAA6H;YAKzH,0DAAuD;YAAvD,sHAAuD;YAKvD,0DAA+C;YAA/C,8GAA+C;YAOzD,0DAAc;YAAd,uEAAc;YAErB,0DAAqC;YAArC,kGAAqC;YAOvB,2DAA6C;YAA7C,yFAA6C;YAIhD,0DAAwE;YAAxE,sIAAwE;YAOtC,0DAAuC;YAAvC,gFAAuC;YACzE,0DAAwE;YAAxE,sIAAwE;YAKN,0DAA6B;YAA7B,0FAA6B;YAC9F,0DAAkC;YAAlC,oFAAkC;YAQhC,2DAA+C;YAA/C,0FAA+C;YAIlD,0DAA2E;YAA3E,yIAA2E;YAQxE,2DAAuC;YAAvC,sFAAuC;YAI1C,0DAAyE;YAAzE,uIAAyE;YAQzE,2DAA4E;YAA5E,0IAA4E;YAOvE,0DAAe;YAAf,4EAAe;YAEE,0DAA0B;YAA1B,qEAA0B;YAEhD,0DAA0E;YAA1E,wIAA0E;YAQ1E,2DAAiF;YAAjF,+IAAiF;YAa1D,0DAAgC;YAAhC,8IAAgC;YACc,0DAA+C;YAA/C,yGAA+C;;wCDtI3I;CAgMC;AA5KyC;6FAA7B,6BAA6B;cALzC,uDAAS;eAAC;gBACT,QAAQ,EAAE,+BAA+B;gBACzC,WAAW,EAAE,yCAAyC;gBACtD,SAAS,EAAE,CAAC,yCAAyC,CAAC;aACvD;;;;;;;;;;;;;;AEnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AAC4B;AACD;;;;;;;AAEjD;IAQE;;;OAGG;IACH,sCAAoB,KAAqB;QAAzC,iBAIC;QAJmB,UAAK,GAAL,KAAK,CAAgB;QACvC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAAsC;YAC/D,KAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC;4GAXU,4BAA4B;gHAA5B,4BAA4B;YCTzC,yEAEE;YAAA;YAAA,2EAEE;YAAA;YAAA,mFAEE;YAAA;YAAA,yEAEE;YAAA;YAAA,wEAA8B;YAAA,8EAAmB;YAAA,4DAAK;YAEtD;YAAA,6EAA0C;YAE1C;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,+EAAmB;YAAA,4DAAO;YAC7C;YAAA,2EAAmB;YAAA,wDAA4C;YAAA,4DAAO;YACxE;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,6EAAiB;YAAA,4DAAO;YAC3C;YAAA,2EAAmB;YAAA,wDAAiD;;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,wEAAY;YAAA,4DAAO;YACtC;YAAA,2EAAmB;YAAA,wDAAiD;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAEN;YAAA,yEAA8B;YAAA,4EAAgB;YAAA,4DAAK;YAEnD;YAAA,6EAA0C;YAE1C;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,mEAAO;YAAA,4DAAO;YACjC;YAAA,2EAAmB;YAAA,wDAA6C;YAAA,4DAAO;YACzE;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,mEAAO;YAAA,4DAAO;YACjC;YAAA,2EAAmB;YAAA,wDAAoD;YAAA,4DAAO;YAChF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,yEAAa;YAAA,4DAAO;YACvC;YAAA,2EAAmB;YAAA,wDAAmD;YAAA,4DAAO;YAC/E;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,sEAAU;YAAA,4DAAO;YACpC;YAAA,2EAAmB;YAAA,wDAAmD;YAAA,4DAAO;YAC/E;YAAA,4DAAM;YAEN;YAAA,yEAA8B;YAAA,0EAAc;YAAA,4DAAK;YAEjD;YAAA,6EAA0C;YAE1C;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,mEAAO;YAAA,4DAAO;YACjC;YAAA,2EAAmB;YAAA,wDAA2C;YAAA,4DAAO;YACvE;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,mEAAO;YAAA,4DAAO;YACjC;YAAA,4EAAmB;YAAA,yDAAkD;YAAA,4DAAO;YAC9E;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,0EAAa;YAAA,4DAAO;YACvC;YAAA,4EAAmB;YAAA,yDAAiD;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,uEAAU;YAAA,4DAAO;YACpC;YAAA,4EAAmB;YAAA,yDAAiD;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAER;YAAA,4DAAM;YAER;YAAA,4DAAmB;YAErB;YAAA,4DAAW;YAEb;YAAA,4DAAM;YACN;;YAxEqB,2DAAc;YAAd,uEAAc;YAIN,0DAA4C;YAA5C,2GAA4C;YAK5C,0DAAiD;YAAjD,4KAAiD;YAKjD,2DAAiD;YAAjD,gHAAiD;YAKzD,0DAAc;YAAd,uEAAc;YAIN,0DAA6C;YAA7C,4GAA6C;YAK7C,0DAAoD;YAApD,mHAAoD;YAKpD,0DAAmD;YAAnD,kHAAmD;YAKnD,0DAAmD;YAAnD,kHAAmD;YAK3D,0DAAc;YAAd,uEAAc;YAIN,0DAA2C;YAA3C,0GAA2C;YAK3C,0DAAkD;YAAlD,iHAAkD;YAKlD,0DAAiD;YAAjD,gHAAiD;YAKjD,0DAAiD;YAAjD,gHAAiD;;uCDxE9E;CAsBC;AAbwC;6FAA5B,4BAA4B;cALxC,uDAAS;eAAC;gBACT,QAAQ,EAAE,8BAA8B;gBACxC,WAAW,EAAE,wCAAwC;gBACrD,SAAS,EAAE,CAAC,wCAAwC,CAAC;aACtD;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAsB;AACoB;AACO;;;;;;;;;;;;ICG/C,4EACE;IAAA,8FACF;IAAA,4DAAS;;IAFiC,6IAAmD;;;IAkDnF,uEAA+B;IAAA,wEAAY;IAAA,4DAAO;;;IAClD,uEAAgC;IAAA,wEAAY;IAAA,4DAAO;;;ADpD/D;IAYE;;;OAGG;IACH,2CAAoB,KAAqB;QAAzC,iBAOC;QAPmB,UAAK,GAAL,KAAK,CAAgB;QAPzC,wBAAwB;QACxB,oBAAe,GAAG,KAAK,CAAC;QAOtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAC,IAAsC;YAC/D,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,wBAAwB,CAAC;YAC9D,IAAI,KAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,EAAE,KAAK,KAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,EAAE;gBAC7F,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;aAC9B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;sHAlBU,iCAAiC;qHAAjC,iCAAiC;YCT9C,yEACE;YAAA;YAAA,4EACE;YAAA;YAAA,wEAA+B;YAAA,qFAEjC;YAAA,4DAAS;YACT;YAAA,mIACE;YAEJ;YAAA,4DAAM;YAEN;YAAA,0EAEE;YAAA;YAAA,4EAEE;YAAA;YAAA,oFAEE;YAAA;YAAA,0EAEE;YAAA;YAAA,yEAA8B;YAAA,wDAAmC;YAAA,4DAAK;YAEtE;YAAA,6EAA0C;YAE1C;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,sEAAU;YAAA,4DAAO;YACpC;YAAA,4EAAmB;YAAA,wDAAqD;YAAA,4DAAO;YACjF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,iEAAK;YAAA,4DAAO;YAC/B;YAAA,4EAAmB;YAAA,wDAAiD;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,qEAAS;YAAA,4DAAO;YACnC;YAAA,4EAAmB;YAAA,wDAA6C;YAAA,4DAAO;YACzE;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,mEAAO;YAAA,4DAAO;YACjC;YAAA,4EAAmB;YAAA,wDAA2C;YAAA,4DAAO;YACvE;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,8EAAkB;YAAA,4DAAO;YAC5C;YAAA,4EAAmB;YAAA,wDAAoD;YAAA,4DAAO;YAChF;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,yEAAa;YAAA,4DAAO;YACvC;YAAA,4EAAmB;YAAA,wDAA6G;YAAA,4DAAO;YACzI;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,wEAAY;YAAA,4DAAO;YACtC;YAAA,4EACE;YAAA;YAAA,kIAA+B;YAC/B;YAAA,kIAAgC;YAClC;YAAA,4DAAO;YACT;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,2EAAmB;YAAA,sEAAU;YAAA,4DAAO;YACpC;YAAA,4EAAmB;YAAA,wDAA4C;YAAA,4DAAO;YACxE;YAAA,4DAAM;YAEN;YAAA,0EACE;YAAA;YAAA,4EAAmB;YAAA,yEAAY;YAAA,4DAAO;YACtC;YAAA,6EAAmB;YAAA,yDAAmD;YAAA,4DAAO;YAC/E;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,6EAAgB;YAAA,4DAAO;YAC1C;YAAA,6EAAmB;YAAA,yDAAkD;YAAA,4DAAO;YAC9E;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,wEAAW;YAAA,4DAAO;YACrC;YAAA,6EAAmB;YAAA,yDAAuG;YAAA,4DAAO;YACnI;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,uFAA0B;YAAA,4DAAO;YACpD;YAAA,6EAAmB;YAAA,yDAAoD;YAAA,4DAAO;YAChF;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,oEAAO;YAAA,4DAAO;YACjC;YAAA,6EAAmB;YAAA,yDAAqC;YAAA,4DAAO;YACjE;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,sEAAS;YAAA,4DAAO;YACnC;YAAA,6EAAmB;YAAA,yDAAiG;;;YAAA,4DAAO;YAC7H;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,6EAAgB;YAAA,4DAAO;YAC1C;YAAA,6EAAmB;YAAA,yDAAmD;YAAA,4DAAO;YAC/E;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,sEAAS;YAAA,4DAAO;YACnC;YAAA,6EAAmB;YAAA,yDAAiD;YAAA,4DAAO;YAC7E;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,kFAAqB;YAAA,4DAAO;YAC/C;YAAA,6EAAmB;YAAA,yDAAwD;YAAA,4DAAO;YACpF;YAAA,4DAAM;YAEN;YAAA,2EACE;YAAA;YAAA,4EAAmB;YAAA,0EAAa;YAAA,4DAAO;YACvC;YAAA,6EAAmB;YAAA,yDAA0D;;YAAA,4DAAO;YACtF;YAAA,4DAAM;YAER;YAAA,4DAAM;YAER;YAAA,4DAAmB;YAErB;YAAA,4DAAW;YAEb;YAAA,4DAAM;YACN;;YAzH4C,0DAA8B;YAA9B,8IAA8B;YAIsB,0DAA6C;YAA7C,uGAA6C;YAavG,2DAAmC;YAAnC,kGAAmC;YAEpD,0DAAc;YAAd,uEAAc;YAIN,0DAAqD;YAArD,oHAAqD;YAKrD,0DAAiD;YAAjD,gHAAiD;YAKjD,0DAA6C;YAA7C,4GAA6C;YAK7C,0DAA2C;YAA3C,0GAA2C;YAK3C,0DAAoD;YAApD,mHAAoD;YAKpD,0DAA6G;YAA7G,yLAA6G;YAMxH,2DAAuB;YAAvB,qFAAuB;YACvB,0DAAwB;YAAxB,sFAAwB;YAMb,2DAA4C;YAA5C,2GAA4C;YAK5C,0DAAmD;YAAnD,kHAAmD;YAKnD,0DAAkD;YAAlD,iHAAkD;YAKlD,0DAAuG;YAAvG,qLAAuG;YAKvG,0DAAoD;YAApD,mHAAoD;YAKpD,0DAAqC;YAArC,oGAAqC;YAKrC,0DAAiG;YAAjG,uSAAiG;YAKjG,2DAAmD;YAAnD,kHAAmD;YAKnD,0DAAiD;YAAjD,gHAAiD;YAKjD,0DAAwD;YAAxD,uHAAwD;YAKxD,0DAA0D;YAA1D,sLAA0D;;4CDhHvF;CA6BC;AApB6C;6FAAjC,iCAAiC;cAL7C,uDAAS;eAAC;gBACT,QAAQ,EAAE,mCAAmC;gBAC7C,WAAW,EAAE,6CAA6C;gBAC1D,SAAS,EAAE,CAAC,6CAA6C,CAAC;aAC3D","file":"account-transfers-account-transfers-module.js","sourcesContent":["/** Angular Imports */\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n/** Translation Imports */\r\nimport { extract } from '../core/i18n/i18n.service';\r\n\r\n/** Custom Components */\r\nimport { ViewStandingInstructionsComponent } from './view-standing-instructions/view-standing-instructions.component';\r\nimport { EditStandingInstructionsComponent } from './edit-standing-instructions/edit-standing-instructions.component';\r\nimport { CreateStandingInstructionsComponent } from './create-standing-instructions/create-standing-instructions.component';\r\nimport { MakeAccountTransfersComponent } from './make-account-transfers/make-account-transfers.component';\r\nimport { ListStandingInstructionsComponent } from './list-standing-instructions/list-standing-instructions.component';\r\nimport { ListTransactionsComponent } from './list-transactions/list-transactions.component';\r\nimport { ViewAccountTransferComponent } from './view-account-transfer/view-account-transfer.component';\r\n\r\n/** Custom Resolvers */\r\nimport { ViewStandingInstructionsResolver } from './common-resolvers/view-standing-instructions.resolver';\r\nimport { StandingInstructionsDataAndTemplateResolver } from './common-resolvers/standing-instructions-data-and-template.resolver';\r\nimport { StandingInstructionsTemplateResolver } from './common-resolvers/standing-instructions-template.resolver';\r\nimport { MakeAccountTransferTemplateResolver } from './common-resolvers/make-account-transfer-template.resolver';\r\nimport { ListTransactionsResolver } from './common-resolvers/list-transactions.resolver';\r\nimport { ViewAccountTransferResolver } from './common-resolvers/view-account-transfer.resolver';\r\n\r\n/** Loans Route. */\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'create-standing-instructions',\r\n        data: { title: extract('Create Standing Instructions'), breadcrumb: 'Create Standing Instructions', routeParamBreadcrumb: 'Create Standing Instructions' },\r\n        component: CreateStandingInstructionsComponent,\r\n        resolve: {\r\n          standingIntructionsTemplate: StandingInstructionsTemplateResolver\r\n        }\r\n      },\r\n      {\r\n        path: 'make-account-transfer',\r\n        data: { title: extract('Account Transfer'), breadcrumb: 'Account Transfer', routeParamBreadcrumb: 'Account Transfer' },\r\n        component: MakeAccountTransfersComponent,\r\n        resolve: {\r\n          accountTransferTemplate: MakeAccountTransferTemplateResolver\r\n        }\r\n      },\r\n      {\r\n        path: 'list-standing-instructions',\r\n        data: { title: extract('List Standing Instructions'), breadcrumb: 'List Standing Instructions', routeParamBreadcrumb: 'List Standing Instructions' },\r\n        component: ListStandingInstructionsComponent,\r\n        resolve: {\r\n          standingIntructionsTemplate: StandingInstructionsTemplateResolver\r\n        }\r\n      },\r\n      {\r\n        path: 'account-transfers',\r\n        data: { title: extract('View Account Transfer'), breadcrumb: 'Account Transfers', routeParamBreadcrumb: false },\r\n        children: [\r\n          {\r\n            path: ':transferid',\r\n            data: { routeParamBreadcrumb: 'transferid' },\r\n            component: ViewAccountTransferComponent,\r\n            resolve: {\r\n              viewAccountTransferData: ViewAccountTransferResolver\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        path: ':standingInstructionsId',\r\n        data: { title: extract('Standing Instructions'), routeParamBreadcrumb: 'standingInstructionsId' },\r\n        children: [\r\n          {\r\n            path: 'view',\r\n            data: { title: extract('View Standing Instructions'), breadcrumb: 'view', routeParamBreadcrumb: false },\r\n            component: ViewStandingInstructionsComponent,\r\n            resolve: {\r\n              standingInstructionsData: ViewStandingInstructionsResolver,\r\n            },\r\n          },\r\n          {\r\n            path: 'edit',\r\n            data: { title: extract('Edit Standing Instructions'), breadcrumb: 'edit', routeParamBreadcrumb: false },\r\n            component: EditStandingInstructionsComponent,\r\n            resolve: {\r\n              standingInstructionsDataAndTemplate: StandingInstructionsDataAndTemplateResolver,\r\n            },\r\n          },\r\n          {\r\n            path: 'list-account-transactions',\r\n            data: { title: extract('List Account Transactions'), breadcrumb: 'List Account Transactions', routeParamBreadcrumb: 'List Account Transactions' },\r\n            component: ListTransactionsComponent,\r\n            resolve: {\r\n              listTransactionData: ListTransactionsResolver\r\n            }\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n  declarations: [],\r\n  providers: [\r\n    ViewStandingInstructionsResolver,\r\n    StandingInstructionsDataAndTemplateResolver,\r\n    StandingInstructionsTemplateResolver,\r\n    MakeAccountTransferTemplateResolver,\r\n    ListTransactionsResolver,\r\n    ViewAccountTransferResolver\r\n  ]\r\n})\r\n\r\nexport class AccountTransfersRoutingModule { }\r\n","/** Angular Imports */\r\nimport { NgModule } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n/** Custom Modules */\r\nimport { AccountTransfersRoutingModule } from './account-transfers-routing.module';\r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { PipesModule } from '../pipes/pipes.module';\r\nimport { DirectivesModule } from '../directives/directives.module';\r\n\r\n/** Custom Components */\r\nimport { ViewStandingInstructionsComponent } from './view-standing-instructions/view-standing-instructions.component';\r\nimport { EditStandingInstructionsComponent } from './edit-standing-instructions/edit-standing-instructions.component';\r\nimport { CreateStandingInstructionsComponent } from './create-standing-instructions/create-standing-instructions.component';\r\nimport { MakeAccountTransfersComponent } from './make-account-transfers/make-account-transfers.component';\r\nimport { ListStandingInstructionsComponent } from './list-standing-instructions/list-standing-instructions.component';\r\nimport { ListTransactionsComponent } from './list-transactions/list-transactions.component';\r\nimport { ViewAccountTransferComponent } from './view-account-transfer/view-account-transfer.component';\r\n/**\r\n * Account Transfers Module\r\n *\r\n * All components related to Account Transfers functions should be declared here.\r\n */\r\n@NgModule({\r\n  imports: [SharedModule, PipesModule, DirectivesModule, AccountTransfersRoutingModule],\r\n  declarations: [\r\n    ViewStandingInstructionsComponent,\r\n    EditStandingInstructionsComponent,\r\n    CreateStandingInstructionsComponent,\r\n    MakeAccountTransfersComponent,\r\n    ListStandingInstructionsComponent,\r\n    ListTransactionsComponent,\r\n    ViewAccountTransferComponent\r\n  ],\r\n  providers: [DatePipe]\r\n})\r\nexport class AccountTransfersModule { }\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * Account Transfers Service.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountTransfersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * @params standingInstructionsId\r\n   * Returns the details of a particular Standing Instruction\r\n   */\r\n  getStandingInstructionsData(standingInstructionsId: any): Observable<any> {\r\n    return this.http.get(`/standinginstructions/${standingInstructionsId}`);\r\n  }\r\n\r\n  getStandingInstructionsDataAndTemplate(standingInstructionsId: any): Observable<any> {\r\n    const httpParams = new HttpParams().set('associations', 'template');\r\n    return this.http.get(`/standinginstructions/${standingInstructionsId}`, { params: httpParams });\r\n  }\r\n\r\n  updateStandingInstructionsData(standinginstructionsId: any, data: any): Observable<any> {\r\n    const httpParams = new HttpParams().set('command', 'update');\r\n    return this.http.put(`/standinginstructions/${standinginstructionsId}`, data, { params: httpParams });\r\n  }\r\n\r\n  getStandingInstructionsTemplate(clientId: any, officeId: any, accountTypeId: string, formValue?: any): Observable<any> {\r\n    let httpParams = new HttpParams().set('fromAccountType', accountTypeId)\r\n                                       .set('fromClientId', clientId)\r\n                                       .set('fromOfficeId', officeId);\r\n    if (formValue) {\r\n      const propNames = Object.getOwnPropertyNames(formValue);\r\n      for (let i = 0; i < propNames.length; i++) {\r\n        const propName = propNames[i];\r\n        httpParams = httpParams.set(propName, formValue[propName]);\r\n      }\r\n    }\r\n    return this.http.get(`/standinginstructions/template`, { params: httpParams });\r\n  }\r\n\r\n  createStandingInstructions(data: Object): Observable<any> {\r\n    return this.http.post(`/standinginstructions`, data);\r\n  }\r\n\r\n  newAccountTranferResource(id: any, accountTypeId: any, formValue?: any): Observable<any> {\r\n    let httpParams = new HttpParams().set('fromAccountId', id)\r\n      .set('fromAccountType', accountTypeId);\r\n    if (formValue) {\r\n      const propNames = Object.getOwnPropertyNames(formValue);\r\n      for (let i = 0; i < propNames.length; i++) {\r\n        const propName = propNames[i];\r\n        httpParams = httpParams.set(propName, formValue[propName]);\r\n      }\r\n    }\r\n    return this.http.get(`/accounttransfers/template`, { params: httpParams });\r\n\r\n  }\r\n\r\n  createAccountTransfer(data: any): Observable<any> {\r\n    return this.http.post(`/accounttransfers`, data);\r\n  }\r\n\r\n  /**\r\n   * @param clientId Client Id\r\n   * @param clientName Client Name\r\n   * @param fromAccountId Account Id\r\n   * @param locale Locale\r\n   * @param dateFormat Date Format\r\n   * @returns {Observable<any>} Standing Instructions\r\n   */\r\n  getStandingInstructions(searchData: any): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n    const propNames = Object.getOwnPropertyNames(searchData);\r\n    for (let i = 0; i < propNames.length; i++) {\r\n      const propName = propNames[i];\r\n      if (!(searchData[propName] === '' || searchData[propName] === undefined || searchData[propName] === null)) {\r\n        httpParams = httpParams.set(propName, searchData[propName]);\r\n      }\r\n    }\r\n    return this.http.get(`/standinginstructions`, { params: httpParams });\r\n  }\r\n\r\n  deleteStandingInstrucions(id: any) {\r\n    const httpParams = new HttpParams().set('command', 'delete');\r\n    return this.http.delete(`/standinginstructions/${id}`, { params: httpParams });\r\n  }\r\n\r\n\r\n  getStandingInstructionsTransactions(standingInstructionsId: any, dateFormat: any, locale: any) {\r\n    const httpParams = new HttpParams().set('associations', 'transactions')\r\n                                        .set('dateFormat', dateFormat)\r\n                                        .set('limit', '14')\r\n                                        .set('locale', locale)\r\n                                        .set('offset', '0');\r\n    return this.http.get(`/standinginstructions/${standingInstructionsId}`, { params: httpParams });\r\n  }\r\n\r\n  getViewAccountTransferDetails(transferId: any): Observable<any> {\r\n    return this.http.get(`/accounttransfers/${transferId}`);\r\n  }\r\n\r\n}\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\nimport { SettingsService } from 'app/settings/settings.service';\r\n\r\n/**\r\n * View Standing Instructions resolver.\r\n */\r\n@Injectable()\r\nexport class ListTransactionsResolver implements Resolve<Object> {\r\n\r\n    /**\r\n     * @param {AccountTransfersService} accountTransfersService Account Transfers service.\r\n     * @param {SettingsService} settingsService Settings Service.\r\n     */\r\n    constructor(private accountTransfersService: AccountTransfersService,\r\n        private settingsService: SettingsService) { }\r\n\r\n    /**\r\n     * Returns the Standing Instructions Data.\r\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\r\n     * @returns {Observable<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        const id = route.parent.paramMap.get('standingInstructionsId');\r\n        const dateFormat = this.settingsService.dateFormat;\r\n        const locale = this.settingsService.language.code;\r\n        return this.accountTransfersService.getStandingInstructionsTransactions(id, dateFormat, locale);\r\n    }\r\n}\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/**\r\n * View Standing Instructions resolver.\r\n */\r\n@Injectable()\r\nexport class MakeAccountTransferTemplateResolver implements Resolve<Object> {\r\n\r\n    accountTypeId: string;\r\n    id: any;\r\n    /**\r\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\r\n     */\r\n    constructor(private accountTransfersService: AccountTransfersService) { }\r\n\r\n    /**\r\n     * Returns the Standing Instructions Data.\r\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\r\n     * @returns {Observable<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        const accountType = route.queryParamMap.get('accountType');\r\n        switch (accountType) {\r\n            case 'fromloans':\r\n                this.accountTypeId = '1';\r\n                this.id = route.queryParamMap.get('loanId');\r\n                break;\r\n            case 'fromsavings':\r\n                this.accountTypeId = '2';\r\n                this.id = route.queryParamMap.get('savingsId');\r\n                break;\r\n            default:\r\n                this.accountTypeId = '0';\r\n        }\r\n        return this.accountTransfersService.newAccountTranferResource(this.id, this.accountTypeId);\r\n    }\r\n\r\n}\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/**\r\n * View Standing Instructions resolver.\r\n */\r\n@Injectable()\r\nexport class StandingInstructionsDataAndTemplateResolver implements Resolve<Object> {\r\n\r\n    /**\r\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\r\n     */\r\n    constructor(private accountTransfersService: AccountTransfersService) { }\r\n\r\n    /**\r\n     * Returns the Standing Instructions Data.\r\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\r\n     * @returns {Observable<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        const standingInstructionsId = route.parent.paramMap.get('standingInstructionsId');\r\n        return this.accountTransfersService.getStandingInstructionsDataAndTemplate(standingInstructionsId);\r\n    }\r\n\r\n}\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/**\r\n * View Standing Instructions resolver.\r\n */\r\n@Injectable()\r\nexport class StandingInstructionsTemplateResolver implements Resolve<Object> {\r\n\r\n    accountTypeId: string;\r\n\r\n    /**\r\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\r\n     */\r\n    constructor(private accountTransfersService: AccountTransfersService) { }\r\n\r\n    /**\r\n     * Returns the Standing Instructions Data.\r\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\r\n     * @returns {Observable<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        const officeId = route.queryParamMap.get('officeId');\r\n        const accountType = route.queryParamMap.get('accountType');\r\n        const clientId = route.parent.paramMap.get('clientId');\r\n        switch (accountType) {\r\n            case 'fromloans':\r\n                this.accountTypeId = '1';\r\n                break;\r\n            case 'fromsavings':\r\n                this.accountTypeId = '2';\r\n                break;\r\n            default:\r\n                this.accountTypeId = '0';\r\n        }\r\n        return this.accountTransfersService.getStandingInstructionsTemplate(clientId, officeId, this.accountTypeId);\r\n    }\r\n\r\n}\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/**\r\n * View Account Transfer data resolver.\r\n */\r\n@Injectable()\r\nexport class ViewAccountTransferResolver implements Resolve<Object> {\r\n\r\n    /**\r\n     * @param {AccountTransfersService} AccountTransfersService Savings service.\r\n     */\r\n    constructor(private accountTransfersService: AccountTransfersService) { }\r\n\r\n    /**\r\n     * Returns the View Account Transfer data.\r\n     * @returns {Observable<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        const transferId = route.paramMap.get('transferid');\r\n        return this.accountTransfersService.getViewAccountTransferDetails(transferId);\r\n    }\r\n\r\n}\r\n","/** Angular Imports */\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\n\r\n/** rxjs Imports */\r\nimport { Observable } from 'rxjs';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/**\r\n * View Standing Instructions resolver.\r\n */\r\n@Injectable()\r\nexport class ViewStandingInstructionsResolver implements Resolve<Object> {\r\n\r\n    /**\r\n     * @param {accountTransfersService} AccountTransfersService Account Transfers service.\r\n     */\r\n    constructor(private accountTransfersService: AccountTransfersService) { }\r\n\r\n    /**\r\n     * Returns the Standing Instructions Data.\r\n     * @param {ActivatedRouteSnapshot} route Route Snapshot\r\n     * @returns {Observable<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n        const standingInstructionsId = route.parent.paramMap.get('standingInstructionsId');\r\n        return this.accountTransfersService.getStandingInstructionsData(standingInstructionsId);\r\n    }\r\n\r\n}\r\n","/** Angular Imports */\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\nimport { SettingsService } from 'app/settings/settings.service';\r\n\r\n/**\r\n * Create Standing Instructions\r\n */\r\n@Component({\r\n  selector: 'mifosx-create-standing-instructions',\r\n  templateUrl: './create-standing-instructions.component.html',\r\n  styleUrls: ['./create-standing-instructions.component.scss']\r\n})\r\nexport class CreateStandingInstructionsComponent implements OnInit {\r\n\r\n  /** Standing Instructions Data */\r\n  standingIntructionsTemplate: any;\r\n  /** Minimum date allowed. */\r\n  minDate = new Date(2000, 0, 1);\r\n  /** Maximum date allowed. */\r\n  maxDate = new Date(2100, 0, 1);\r\n  /** Allow Client Edit */\r\n  allowclientedit = true;\r\n  /** Edit Standing Instructions form. */\r\n  createStandingInstructionsForm: FormGroup;\r\n  /** Priority Type Data */\r\n  priorityTypeData: any;\r\n  /** Status Type Data */\r\n  statusTypeData: any;\r\n  /** Instruction Type Data  */\r\n  instructionTypeData: any;\r\n  /** Recurrence Type Data */\r\n  recurrenceTypeData: any;\r\n  /** Recurrence Frequency Type Data */\r\n  recurrenceFrequencyTypeData: any;\r\n  /** Transfer Type Data */\r\n  transferTypeData: any;\r\n  /** From Account Type Data */\r\n  fromAccountTypeData: any;\r\n  /** From Account Data */\r\n  fromAccountData: any;\r\n  /** Destination Type Data */\r\n  destinationTypeData: { id: number; value: string; }[];\r\n  /** To Office Type Data */\r\n  toOfficeTypeData: any;\r\n  /** To Client Type Data */\r\n  toClientTypeData: any;\r\n  /** To Account Type Data */\r\n  toAccountTypeData: any;\r\n  /** To Account Data */\r\n  toAccountData: any;\r\n  /** Account Type Id */\r\n  accountTypeId: any;\r\n  /** Office Id */\r\n  officeId: any;\r\n  /** Account Type */\r\n  accountType: any;\r\n  /** Client Id */\r\n  clientId: any;\r\n\r\n  /**\r\n   * Retrieves the standing instructions template from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   * @param {FormBuilder} formBuilder Form Builder\r\n   * @param {Router} router Router\r\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\r\n   * @param {SettingsService} settingsService Settings Service\r\n   * @param {DatePipe} datePipe Date Pipe\r\n   */\r\n  constructor(private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountTransfersService: AccountTransfersService,\r\n    private settingsService: SettingsService,\r\n    private datePipe: DatePipe) {\r\n    this.route.data.subscribe((data: { standingIntructionsTemplate: any }) => {\r\n      this.standingIntructionsTemplate = data.standingIntructionsTemplate;\r\n      this.setParams();\r\n      this.setOptions();\r\n    });\r\n  }\r\n\r\n  /** Sets the value from the URL */\r\n  setParams() {\r\n    this.officeId = this.route.snapshot.queryParams['officeId'];\r\n    this.accountType = this.route.snapshot.queryParams['accountType'];\r\n    this.clientId = this.route.parent.snapshot.params['clientId'];\r\n    switch (this.accountType) {\r\n      case 'fromloans':\r\n        this.accountTypeId = '1';\r\n        break;\r\n      case 'fromsavings':\r\n        this.accountTypeId = '2';\r\n        break;\r\n      default:\r\n        this.accountTypeId = '0';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates and sets the create standing instructions form.\r\n   */\r\n  ngOnInit() {\r\n    this.createCreateStandingInstructionsForm();\r\n    this.buildDependencies();\r\n    this.createStandingInstructionsForm.patchValue({\r\n      'applicant': this.standingIntructionsTemplate.fromClient.displayName\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates the standing instruction form.\r\n   */\r\n  createCreateStandingInstructionsForm() {\r\n    this.createStandingInstructionsForm = this.formBuilder.group({\r\n      'name': ['', Validators.required],\r\n      'applicant': [{value: '', disabled: true}],\r\n      'transferType': ['', Validators.required],\r\n      'priority': ['', Validators.required],\r\n      'status': ['', Validators.required],\r\n      'fromAccountType': ['', Validators.required],\r\n      'fromAccountId': ['', Validators.required],\r\n      'destination': ['', Validators.required],\r\n      'toOfficeId': ['', Validators.required],\r\n      'toClientId': ['', Validators.required],\r\n      'toAccountType': ['', Validators.required],\r\n      'toAccountId': ['', Validators.required],\r\n      'instructionType': ['', Validators.required],\r\n      'amount': ['', Validators.required],\r\n      'validFrom': ['', Validators.required],\r\n      'validTill': ['', Validators.required],\r\n      'recurrenceType': ['', Validators.required],\r\n      'recurrenceInterval': ['', Validators.required],\r\n      'recurrenceFrequency': ['', Validators.required],\r\n      'recurrenceOnMonthDay': ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  /** Sets options value */\r\n  setOptions() {\r\n    this.transferTypeData = this.standingIntructionsTemplate.transferTypeOptions;\r\n    this.priorityTypeData = this.standingIntructionsTemplate.priorityOptions;\r\n    this.statusTypeData = this.standingIntructionsTemplate.statusOptions;\r\n    this.fromAccountTypeData = this.standingIntructionsTemplate.fromAccountTypeOptions;\r\n    this.fromAccountData = this.standingIntructionsTemplate.fromAccountOptions;\r\n    this.destinationTypeData = [{ id: 1, value: 'own account' }, { id: 2, value: 'with in bank' }];\r\n    this.toOfficeTypeData = this.standingIntructionsTemplate.toOfficeOptions;\r\n    this.toClientTypeData = this.standingIntructionsTemplate.toClientOptions;\r\n    this.toAccountTypeData = this.standingIntructionsTemplate.toAccountTypeOptions;\r\n    this.toAccountData = this.standingIntructionsTemplate.toAccountOptions;\r\n    this.instructionTypeData = this.standingIntructionsTemplate.instructionTypeOptions;\r\n    this.recurrenceTypeData = this.standingIntructionsTemplate.recurrenceTypeOptions;\r\n    this.recurrenceFrequencyTypeData = this.standingIntructionsTemplate.recurrenceFrequencyOptions;\r\n  }\r\n\r\n  /**\r\n   * Changes the value on change of destination value\r\n   */\r\n  buildDependencies() {\r\n    this.createStandingInstructionsForm.get('destination').valueChanges.subscribe((destination: any) => {\r\n      if (destination === 1) {\r\n        this.allowclientedit = false;\r\n        this.createStandingInstructionsForm.patchValue({\r\n          'toOfficeId': this.officeId,\r\n          'toClientId': this.clientId\r\n        });\r\n        this.createStandingInstructionsForm.controls['toOfficeId'].disable();\r\n        this.createStandingInstructionsForm.controls['toClientId'].disable();\r\n        this.changeEvent();\r\n      } else {\r\n        this.allowclientedit = true;\r\n        this.createStandingInstructionsForm.patchValue({\r\n          'toOfficeId': '',\r\n          'toClientId': ''\r\n        });\r\n        this.createStandingInstructionsForm.controls['toOfficeId'].enable();\r\n        this.createStandingInstructionsForm.controls['toClientId'].enable();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /** Executes on change of various select options */\r\n  changeEvent() {\r\n    const formValue = this.refineObject(this.createStandingInstructionsForm.value);\r\n    this.accountTransfersService.getStandingInstructionsTemplate(this.clientId, this.officeId, this.accountTypeId, formValue).subscribe((response: any) => {\r\n      this.standingIntructionsTemplate = response;\r\n      this.setOptions();\r\n    });\r\n  }\r\n\r\n  /** Refine Object\r\n   * Removes the object param with null or '' values\r\n   */\r\n  refineObject(dataObj: Object) {\r\n    const propNames = Object.getOwnPropertyNames(dataObj);\r\n    for (let i = 0; i < propNames.length; i++) {\r\n      const propName = propNames[i];\r\n      if (dataObj[propName] === null || dataObj[propName] === undefined || dataObj[propName] === '') {\r\n        delete dataObj[propName];\r\n      }\r\n    }\r\n    return dataObj;\r\n  }\r\n\r\n  /**\r\n   * Submits the standing instructions form\r\n   */\r\n  submit() {\r\n    const dateFormat = this.settingsService.dateFormat;\r\n    const locale = this.settingsService.language.code;\r\n    const standingInstructionData = {\r\n      ... this.createStandingInstructionsForm.value,\r\n      dateFormat,\r\n      locale,\r\n      monthDayFormat: 'dd MMMM',\r\n      fromClientId: this.clientId,\r\n      fromOfficeId: this.officeId,\r\n      validFrom: this.datePipe.transform(this.createStandingInstructionsForm.value.validFrom, dateFormat),\r\n      validTill: this.datePipe.transform(this.createStandingInstructionsForm.value.validTill, dateFormat),\r\n      recurrenceOnMonthDay: this.datePipe.transform(this.createStandingInstructionsForm.value.recurrenceOnMonthDay, 'dd MMMM'),\r\n    };\r\n    delete standingInstructionData['destination'];\r\n    delete standingInstructionData['applicant'];\r\n    this.accountTransfersService.createStandingInstructions(standingInstructionData).subscribe((response: any) => {\r\n      this.router.navigate(['../../'], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n  <mat-card>\r\n\r\n    <form [formGroup]=\"createStandingInstructionsForm\">\r\n\r\n      <mat-card-content>\r\n\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Name</mat-label>\r\n            <input matInput required formControlName=\"name\">\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.name.hasError('required')\">\r\n              Name is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Applicant</mat-label>\r\n            <input matInput formControlName=\"applicant\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Type</mat-label>\r\n            <mat-select required formControlName=\"transferType\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let transferType of transferTypeData\" [value]=\"transferType.id\">\r\n                {{ transferType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.transferType.hasError('required')\">\r\n              Transfer Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Priority</mat-label>\r\n            <mat-select required formControlName=\"priority\">\r\n              <mat-option *ngFor=\"let priorityType of priorityTypeData\" [value]=\"priorityType.id\">\r\n                {{ priorityType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.priority.hasError('required')\">\r\n              Priority is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select required formControlName=\"status\">\r\n              <mat-option *ngFor=\"let statusType of statusTypeData\" [value]=\"statusType.id\">\r\n                {{ statusType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.status.hasError('required')\">\r\n              Status is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>From Account Type</mat-label>\r\n            <mat-select required formControlName=\"fromAccountType\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let fromAccountType of fromAccountTypeData\" [value]=\"fromAccountType.id\">\r\n                {{ fromAccountType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.fromAccountType.hasError('required')\">\r\n              From Account Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>From Account</mat-label>\r\n            <mat-select required formControlName=\"fromAccountId\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let fromAccount of fromAccountData\" [value]=\"fromAccount.id\">\r\n                {{ fromAccount.productName }} - {{ fromAccount.accountNo }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.fromAccountId.hasError('required')\">\r\n              From Account is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Destination</mat-label>\r\n            <mat-select required formControlName=\"destination\">\r\n              <mat-option *ngFor=\"let destinationType of destinationTypeData\" [value]=\"destinationType.id\">\r\n                {{ destinationType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.destination.hasError('required')\">\r\n              Destination is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>To Office</mat-label>\r\n            <mat-select required formControlName=\"toOfficeId\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toOfficeType of toOfficeTypeData\" [value]=\"toOfficeType.id\">\r\n                {{ toOfficeType.name }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toOfficeId.hasError('required')\">\r\n              To Office is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Beneficiary</mat-label>\r\n            <mat-select required formControlName=\"toClientId\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toClientType of toClientTypeData\" [value]=\"toClientType.id\">\r\n                {{ toClientType.displayName }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toClientId.hasError('required')\">\r\n              Beneficiary is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>To Account Type</mat-label>\r\n            <mat-select required formControlName=\"toAccountType\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toAccountType of toAccountTypeData\" [value]=\"toAccountType.id\">\r\n                {{ toAccountType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toAccountType.hasError('required')\">\r\n              To Account Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>To Account</mat-label>\r\n            <mat-select required formControlName=\"toAccountId\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toAccount of toAccountData\" [value]=\"toAccount.id\">\r\n                {{ toAccount.productName }} - {{ toAccount.accountNo }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.toAccountId.hasError('required')\">\r\n              To Account is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Standing Instruction Type</mat-label>\r\n            <mat-select formControlName=\"instructionType\">\r\n              <mat-option *ngFor=\"let instructionsType of instructionTypeData\" [value]=\"instructionsType.id\">\r\n                {{ instructionsType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.instructionType.hasError('required')\">\r\n              Standing Instruction Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Amount</mat-label>\r\n            <input type=\"number\" matInput required formControlName=\"amount\">\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.amount.hasError('required')\">\r\n              Amount is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Validity From</mat-label>\r\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validFromDatePicker\" required\r\n              formControlName=\"validFrom\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"validFromDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #validFromDatePicker></mat-datepicker>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.validFrom.hasError('required')\">\r\n              Valid From Date is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Validity To</mat-label>\r\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validTillDatePicker\" required\r\n              formControlName=\"validTill\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"validTillDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #validTillDatePicker></mat-datepicker>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.validTill.hasError('required')\">\r\n              Valid Till Date is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Recurrence Type</mat-label>\r\n            <mat-select required formControlName=\"recurrenceType\">\r\n              <mat-option *ngFor=\"let recurrenceType of recurrenceTypeData\" [value]=\"recurrenceType.id\">\r\n                {{ recurrenceType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceType.hasError('required')\">\r\n              Recurrence Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Interval</mat-label>\r\n            <input type=\"number\" matInput required formControlName=\"recurrenceInterval\">\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceInterval.hasError('required')\">\r\n              Recurrence Interval is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Recurrence Frequency</mat-label>\r\n            <mat-select required formControlName=\"recurrenceFrequency\">\r\n              <mat-option *ngFor=\"let recurrenceFrequencyType of recurrenceFrequencyTypeData\"\r\n                [value]=\"recurrenceFrequencyType.id\">\r\n                {{ recurrenceFrequencyType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceFrequency.hasError('required')\">\r\n              Recurrence Frequency is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>On Month Day</mat-label>\r\n            <input required matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"recurrenceOnMonthDayDatePicker\"\r\n              formControlName=\"recurrenceOnMonthDay\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"recurrenceOnMonthDayDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #recurrenceOnMonthDayDatePicker></mat-datepicker>\r\n            <mat-error *ngIf=\"createStandingInstructionsForm.controls.recurrenceOnMonthDay.hasError('required')\">\r\n              On Month Day is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n        </div>\r\n\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\r\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../']\">Cancel</button>\r\n        <button mat-raised-button color=\"primary\" [disabled]=\"!createStandingInstructionsForm.valid\" *mifosxHasPermission=\"'CREATE_STANDINGINSTRUCTION'\"\r\n          (click)=\"submit()\">Submit</button>\r\n      </mat-card-actions>\r\n\r\n    </form>\r\n\r\n  </mat-card>\r\n\r\n</div>\r\n","/** Angular Imports */\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\nimport { SettingsService } from 'app/settings/settings.service';\r\n\r\n/**\r\n * Edit Standing Instructions\r\n */\r\n@Component({\r\n  selector: 'mifosx-edit-standing-instructions',\r\n  templateUrl: './edit-standing-instructions.component.html',\r\n  styleUrls: ['./edit-standing-instructions.component.scss']\r\n})\r\nexport class EditStandingInstructionsComponent implements OnInit {\r\n\r\n  /** Standing Instructions Data */\r\n  standingInstructionsData: any;\r\n  /** Standing Instructions Id */\r\n  standingInstructionsId: any;\r\n  /** Allow Client Edit */\r\n  allowclientedit = false;\r\n  /** Edit Standing Instructions form. */\r\n  editStandingInstructionsForm: FormGroup;\r\n  /** Priority Type Data */\r\n  priorityTypeData: any;\r\n  /** Status Type Data */\r\n  statusTypeData: any;\r\n  /** Instruction Type Data  */\r\n  instructionTypeData: any;\r\n  /** Recurrence Type Data */\r\n  recurrenceTypeData: any;\r\n  /** Recurrence Frequency Type Data */\r\n  recurrenceFrequencyTypeData: any;\r\n  /** Minimum date allowed. */\r\n  minDate = new Date(2000, 0, 1);\r\n  /** Maximum date allowed. */\r\n  maxDate = new Date();\r\n\r\n  /**\r\n   * Retrieves the standing instructions template from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   * @param {FormBuilder} formBuilder Form Builder\r\n   * @param {Router} router Router\r\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\r\n   * @param {SettingsService} settingsService Settings Service\r\n   * @param {DatePipe} datePipe Date Pipe\r\n   */\r\n  constructor(private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountTransfersService: AccountTransfersService,\r\n    private settingsService: SettingsService,\r\n    private datePipe: DatePipe) {\r\n    this.route.data.subscribe((data: { standingInstructionsDataAndTemplate: any }) => {\r\n      this.standingInstructionsData = data.standingInstructionsDataAndTemplate;\r\n      this.standingInstructionsId = data.standingInstructionsDataAndTemplate.id;\r\n      if (this.standingInstructionsData.fromClient.id === this.standingInstructionsData.toClient.id) {\r\n        this.allowclientedit = false;\r\n      }\r\n      this.setOptions();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates and sets the edit standing instructions form.\r\n   */\r\n  ngOnInit() {\r\n    this.createEditStandingInstructionsForm();\r\n    const presentDate = new Date();\r\n    const n = presentDate.getFullYear();\r\n    if (this.standingInstructionsData.recurrenceOnMonthDay) {\r\n      this.standingInstructionsData.recurrenceOnMonthDay.push(n);\r\n    }\r\n    this.editStandingInstructionsForm.patchValue({\r\n      'name': this.standingInstructionsData.name,\r\n      'applicant': this.standingInstructionsData.fromClient.displayName,\r\n      'type': this.standingInstructionsData.transferType.value,\r\n      'priority': this.standingInstructionsData.priority.id,\r\n      'status': this.standingInstructionsData.status.id,\r\n      'fromAccountType': this.standingInstructionsData.fromAccountType.value,\r\n      'fromAccount': this.standingInstructionsData.fromAccount.productName,\r\n      'destination': this.allowclientedit ? 'Within Bank' : 'Own Account',\r\n      'toOffice': this.standingInstructionsData.toOffice.name,\r\n      'toClientId': this.standingInstructionsData.toClient.displayName,\r\n      'toAccountType': this.standingInstructionsData.toAccountType.value,\r\n      'toAccount': this.standingInstructionsData.toAccount.productName,\r\n      'instructionType': this.standingInstructionsData.instructionType.id,\r\n      'amount': this.standingInstructionsData.amount,\r\n      'validFrom': this.standingInstructionsData.validFrom && new Date(this.standingInstructionsData.validFrom),\r\n      'validTill': this.standingInstructionsData.validTill && new Date(this.standingInstructionsData.validTill),\r\n      'recurrenceType': this.standingInstructionsData.recurrenceType.id,\r\n      'recurrenceInterval': this.standingInstructionsData.recurrenceInterval,\r\n      'recurrenceFrequency': this.standingInstructionsData.recurrenceFrequency.id,\r\n      'recurrenceOnMonthDay': this.standingInstructionsData.recurrenceOnMonthDay && new Date(this.standingInstructionsData.recurrenceOnMonthDay)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates the standing instructions form.\r\n   */\r\n  createEditStandingInstructionsForm() {\r\n    this.editStandingInstructionsForm = this.formBuilder.group({\r\n      'name': [{value: '', disabled: true}],\r\n      'applicant': [{ value: '', disabled: true }],\r\n      'type': [{ value: '', disabled: true }],\r\n      'priority': ['', Validators.required],\r\n      'status': ['', Validators.required],\r\n      'fromAccountType': [{ value: '', disabled: true }],\r\n      'fromAccount': [{ value: '', disabled: true }],\r\n      'destination': [{ value: '', disabled: true }],\r\n      'toOffice': [{ value: '', disabled: true }],\r\n      'toClientId': [{ value: '', disabled: true }],\r\n      'toAccountType': [{ value: '', disabled: true }],\r\n      'toAccount': [{ value: '', disabled: true }],\r\n      'instructionType': '',\r\n      'amount': '',\r\n      'validFrom': ['', Validators.required],\r\n      'validTill': ['', Validators.required],\r\n      'recurrenceType': ['', Validators.required],\r\n      'recurrenceInterval': '',\r\n      'recurrenceFrequency': '',\r\n      'recurrenceOnMonthDay': ''\r\n    });\r\n  }\r\n\r\n  setOptions() {\r\n    this.priorityTypeData = this.standingInstructionsData.priorityOptions;\r\n    this.statusTypeData = this.standingInstructionsData.statusOptions;\r\n    this.instructionTypeData = this.standingInstructionsData.instructionTypeOptions;\r\n    this.recurrenceTypeData = this.standingInstructionsData.recurrenceTypeOptions;\r\n    this.recurrenceFrequencyTypeData = this.standingInstructionsData.recurrenceFrequencyOptions;\r\n  }\r\n\r\n  /**\r\n   * Submits the standing instructions form\r\n   */\r\n  submit() {\r\n    const dateFormat = this.settingsService.dateFormat;\r\n    const locale = this.settingsService.language.code;\r\n    const standingInstructionData = {\r\n      amount: this.editStandingInstructionsForm.value.amount,\r\n      dateFormat,\r\n      instructionType: this.editStandingInstructionsForm.value.instructionType,\r\n      locale,\r\n      monthDayFormat:\t'dd MMMM',\r\n      priority: this.editStandingInstructionsForm.value.priority,\r\n      recurrenceFrequency:\tthis.editStandingInstructionsForm.value.recurrenceFrequency,\r\n      recurrenceInterval:\tthis.editStandingInstructionsForm.value.recurrenceInterval,\r\n      recurrenceOnMonthDay: this.datePipe.transform(this.editStandingInstructionsForm.value.recurrenceOnMonthDay, 'dd MMMM'),\r\n      recurrenceType:\tthis.editStandingInstructionsForm.value.recurrenceType,\r\n      status:\tthis.editStandingInstructionsForm.value.status,\r\n      validFrom: this.datePipe.transform(this.editStandingInstructionsForm.value.validFrom, dateFormat),\r\n      validTill: this.datePipe.transform(this.editStandingInstructionsForm.value.validTill, dateFormat)\r\n    };\r\n    this.accountTransfersService.updateStandingInstructionsData(this.standingInstructionsId, standingInstructionData).subscribe((response: any) => {\r\n      this.router.navigate(['../view'], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n  <mat-card>\r\n\r\n    <form [formGroup]=\"editStandingInstructionsForm\">\r\n\r\n      <mat-card-content>\r\n\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Name</mat-label>\r\n            <input matInput formControlName=\"name\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Applicant</mat-label>\r\n            <input matInput formControlName=\"applicant\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Type</mat-label>\r\n            <input matInput formControlName=\"type\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>From Account Type</mat-label>\r\n            <input matInput formControlName=\"fromAccountType\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Priority</mat-label>\r\n            <mat-select required formControlName=\"priority\">\r\n              <mat-option *ngFor=\"let priorityType of priorityTypeData\" [value]=\"priorityType.id\">\r\n                {{ priorityType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.priority.hasError('required')\">\r\n              Priority is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Status</mat-label>\r\n            <mat-select required formControlName=\"status\">\r\n              <mat-option *ngFor=\"let statusType of statusTypeData\" [value]=\"statusType.id\">\r\n                {{ statusType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.status.hasError('required')\">\r\n              Status is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>From Account</mat-label>\r\n            <input matInput formControlName=\"fromAccount\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Destination</mat-label>\r\n            <input matInput formControlName=\"destination\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>To Office</mat-label>\r\n            <input matInput formControlName=\"toOffice\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Beneficiary</mat-label>\r\n            <input matInput formControlName=\"toClientId\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>To Account Type</mat-label>\r\n            <input matInput formControlName=\"toAccountType\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>To Account</mat-label>\r\n            <input matInput formControlName=\"toAccount\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Standing Instruction Type</mat-label>\r\n            <mat-select formControlName=\"instructionType\">\r\n              <mat-option *ngFor=\"let instructionsType of instructionTypeData\"\r\n                [value]=\"instructionsType.id\">\r\n                {{ instructionsType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Amount</mat-label>\r\n            <input matInput formControlName=\"amount\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Validity From</mat-label>\r\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validFromDatePicker\" required\r\n              formControlName=\"validFrom\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"validFromDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #validFromDatePicker></mat-datepicker>\r\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.validFrom.hasError('required')\">\r\n              Valid From Date is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Validity To</mat-label>\r\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"validTillDatePicker\" required\r\n              formControlName=\"validTill\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"validTillDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #validTillDatePicker></mat-datepicker>\r\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.validTill.hasError('required')\">\r\n              Valid Till Date is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Recurrence Type</mat-label>\r\n            <mat-select required formControlName=\"recurrenceType\">\r\n              <mat-option *ngFor=\"let recurrenceType of recurrenceTypeData\" [value]=\"recurrenceType.id\">\r\n                {{ recurrenceType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"editStandingInstructionsForm.controls.recurrenceType.hasError('required')\">\r\n              Recurrence Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Interval</mat-label>\r\n            <input matInput formControlName=\"recurrenceInterval\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>Recurrence Frequency</mat-label>\r\n            <mat-select formControlName=\"recurrenceFrequency\">\r\n              <mat-option *ngFor=\"let recurrenceFrequencyType of recurrenceFrequencyTypeData\"\r\n                [value]=\"recurrenceFrequencyType.id\">\r\n                {{ recurrenceFrequencyType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"48%\">\r\n            <mat-label>On Month Day</mat-label>\r\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"recurrenceOnMonthDayDatePicker\"\r\n              formControlName=\"recurrenceOnMonthDay\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"recurrenceOnMonthDayDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #recurrenceOnMonthDayDatePicker></mat-datepicker>\r\n          </mat-form-field>\r\n\r\n        </div>\r\n\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\r\n        <button type=\"button\" mat-raised-button [routerLink]=\"['../view']\">Cancel</button>\r\n        <button mat-raised-button color=\"primary\" [disabled]=\"!editStandingInstructionsForm.valid\"\r\n        (click)=\"submit()\" *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\">Submit</button>\r\n      </mat-card-actions>\r\n\r\n    </form>\r\n\r\n  </mat-card>\r\n\r\n</div>\r\n","/** Angular Imports */\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/** Dialog Components */\r\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\r\nimport { SettingsService } from 'app/settings/settings.service';\r\n\r\n/**\r\n * Lists all the standing intructions of particular ID\r\n */\r\n@Component({\r\n  selector: 'mifosx-list-standing-instructions',\r\n  templateUrl: './list-standing-instructions.component.html',\r\n  styleUrls: ['./list-standing-instructions.component.scss']\r\n})\r\nexport class ListStandingInstructionsComponent implements OnInit {\r\n\r\n  /** Recurring Deposits Data */\r\n  standingIntructionsTemplateData: any;\r\n  /** Instructions Data */\r\n  instructionsData: any[];\r\n  /** Name form control. */\r\n  transferType = new FormControl();\r\n  /** ExternalId form control. */\r\n  fromAccountId = new FormControl();\r\n  /** Name form control. */\r\n  clientNameControl = new FormControl();\r\n  /** ExternalId form control. */\r\n  fromClientId = new FormControl();\r\n  /** Client Name */\r\n  clientName: any;\r\n  /** Transfer Type Options Data */\r\n  transferTypeDatas: any;\r\n  /** Account Type */\r\n  accountType: any;\r\n  /** Account Type ID */\r\n  accountTypeId: string;\r\n  /** Id */\r\n  id: any;\r\n  /** Is from Client? */\r\n  isFromClient: Boolean;\r\n  /** Data source for instructions table. */\r\n  dataSource = new MatTableDataSource();\r\n  /** Columns to be displayed in instructions table. */\r\n  displayedColumns: string[] = ['client', 'fromAccount', 'beneficiary', 'toAccount', 'amount', 'validity', 'actions'];\r\n\r\n  /** Instruction Table Reference */\r\n  @ViewChild('instructionsTable', { static: true }) instructionTableRef: MatTable<Element>;\r\n  /** Paginator for centers table. */\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n\r\n  /**\r\n   * Retrieves Standing Instructions Data from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   * @param {MatDialog} route Mat Dialog\r\n   * @param {SettingsService} settingsService Settings Service\r\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\r\n   */\r\n  constructor(private route: ActivatedRoute,\r\n    private accountTransfersService: AccountTransfersService,\r\n    private settingsService: SettingsService,\r\n    private dialog: MatDialog) {\r\n    this.route.data.subscribe((data: { standingIntructionsTemplate: any }) => {\r\n      this.standingIntructionsTemplateData = data.standingIntructionsTemplate;\r\n      if (data.standingIntructionsTemplate.fromClient) {\r\n        this.clientName = this.standingIntructionsTemplateData.fromClient.displayName;\r\n        this.getStandingInstructions();\r\n      }\r\n      this.setParams();\r\n      this.transferTypeDatas = this.standingIntructionsTemplateData.transferTypeOptions;\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  setParams() {\r\n    this.accountType = this.route.snapshot.queryParams['accountType'];\r\n    switch (this.accountType) {\r\n      case 'fromloans':\r\n        this.accountTypeId = '1';\r\n        break;\r\n      case 'fromsavings':\r\n        this.accountTypeId = '2';\r\n        break;\r\n      default:\r\n        this.accountTypeId = '0';\r\n    }\r\n    this.isFromClient = this.route.parent.parent.snapshot.params['clientId'] ? true : false;\r\n  }\r\n\r\n  filterStandingInstructions() {\r\n    this.getStandingInstructions();\r\n  }\r\n\r\n  /**\r\n   * Retrieves standing instructions and initializes instructions table.\r\n   */\r\n  getStandingInstructions() {\r\n    const dateFormat = this.settingsService.dateFormat;\r\n    const locale = this.settingsService.language.code;\r\n    const searchData = {\r\n      clientId : this.standingIntructionsTemplateData.fromClient.id || this.fromClientId.value,\r\n      clientName: this.standingIntructionsTemplateData.fromClient.displayName || this.clientNameControl.value,\r\n      locale,\r\n      dateFormat,\r\n      limit: 14,\r\n      offset: 0,\r\n      fromAccountType: this.accountTypeId,\r\n      fromAccountId: this.fromAccountId.value,\r\n      fromTransferType: this.transferType.value\r\n    };\r\n    this.accountTransfersService.getStandingInstructions(searchData).subscribe((response: any) => {\r\n      this.instructionsData = response.pageItems;\r\n      this.dataSource.data = this.instructionsData;\r\n      this.instructionTableRef.renderRows();\r\n    });\r\n  }\r\n\r\n  /** Deletes selected Standing Instruction */\r\n  deleteStandingInstruction(instructionId: any) {\r\n    const deleteStandingInstructionDialogRef = this.dialog.open(DeleteDialogComponent, {\r\n      data: { deleteContext: `standing instruction id: ${instructionId}` }\r\n    });\r\n    deleteStandingInstructionDialogRef.afterClosed().subscribe((response: any) => {\r\n      if (response.delete) {\r\n        this.accountTransfersService.deleteStandingInstrucions(instructionId)\r\n          .subscribe(() => {});\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n","<mat-card class=\"container\">\r\n\r\n  <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\r\n\r\n    <div fxFlexFill *ngIf=\"isFromClient\">\r\n      <span fxFlex=\"40%\">\r\n        <h3 class=\"mat-h3\">Client Name</h3>\r\n      </span>\r\n      <span fxFlex=\"60%\">\r\n        <h3 class=\"mat-h3\">{{ clientName }}</h3>\r\n      </span>\r\n    </div>\r\n\r\n    <div fxFlexFill *ngIf=\"!isFromClient\">\r\n      <mat-form-field fxFlex=\"30%\">\r\n        <input matInput placeholder=\"ClientName\" [formControl]=\"clientNameControl\">\r\n      </mat-form-field>\r\n      <mat-form-field fxFlex=\"30%\">\r\n        <input matInput placeholder=\"From Client Id\" [formControl]=\"fromClientId\">\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n    <mat-form-field fxFlex=\"30%\">\r\n      <mat-label>Type</mat-label>\r\n      <mat-select [formControl]=\"transferType\">\r\n        <mat-option *ngFor=\"let transferTypeData of transferTypeDatas\" [value]=\"transferTypeData.id\">\r\n          {{ transferTypeData.value }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field fxFlex=\"30%\">\r\n      <input matInput placeholder=\"From Account Id\" [formControl]=\"fromAccountId\">\r\n    </mat-form-field>\r\n\r\n    <button mat-raised-button color=\"primary\" *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\" (click)=\"filterStandingInstructions()\" class=\"filter-button\">\r\n      &nbsp;&nbsp;Filter\r\n    </button>\r\n  </div>\r\n\r\n\r\n  <table mat-table #instructionsTable [dataSource]=\"dataSource\">\r\n\r\n    <ng-container matColumnDef=\"client\">\r\n      <th mat-header-cell *matHeaderCellDef> Client </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromClient.displayName}}-{{instruction.fromClient.id}}\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"fromAccount\">\r\n      <th mat-header-cell *matHeaderCellDef> From Account </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.fromAccount.accountNo}}\r\n        ({{instruction.fromAccountType.value}})</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"beneficiary\">\r\n      <th mat-header-cell *matHeaderCellDef> Beneficiary </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.toClient.displayName}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"toAccount\">\r\n      <th mat-header-cell *matHeaderCellDef> To Account </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.toAccount.accountNo}}\r\n        ({{instruction.toAccountType.value}})</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"amount\">\r\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.instructionType.value}}/{{instruction.amount}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"validity\">\r\n      <th mat-header-cell *matHeaderCellDef> Validity </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">{{instruction.validFrom | date}} to {{instruction.validTill | date}}\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\r\n      <td mat-cell *matCellDef=\"let instruction\">\r\n        <span *ngIf=\"instruction.status.value!=='Deleted'\">\r\n          <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"Edit Standing Instruction\"\r\n            *mifosxHasPermission=\"'UPDATE_STANDINGINSTRUCTION'\"\r\n            [routerLink]=\"['../', instruction.id, 'edit']\">\r\n            <i class=\"fa fa-edit\"></i>\r\n          </button>\r\n        </span>\r\n        <span *ngIf=\"instruction.status.value!=='Deleted'\">\r\n          <button class=\"account-action-button\" mat-raised-button color=\"warn\" matTooltip=\"Delete Standing Instruction\"\r\n            *mifosxHasPermission=\"'DELETE_STANDINGINSTRUCTION'\" (click)=\"deleteStandingInstruction(instruction.id)\">\r\n            <i class=\"fa fa-times\"></i>\r\n          </button>\r\n        </span>\r\n        <button class=\"account-action-button\" mat-raised-button color=\"primary\" matTooltip=\"View Standing Instruction\"\r\n          *mifosxHasPermission=\"'READ_STANDINGINSTRUCTION'\"\r\n          [routerLink]=\"['../', instruction.id, 'view']\">\r\n          <i class=\"fa fa-eye\"></i>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n  </table>\r\n\r\n  <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\r\n\r\n</mat-card>\r\n","/** Angular Imports */\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource, MatTable } from '@angular/material/table';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\n\r\n/** Dialog Components */\r\nimport { DeleteDialogComponent } from 'app/shared/delete-dialog/delete-dialog.component';\r\n\r\n/**\r\n * Recurring Deposits Standing Instructions Tab\r\n */\r\n@Component({\r\n  selector: 'mifosx-list-transactions',\r\n  templateUrl: './list-transactions.component.html',\r\n  styleUrls: ['./list-transactions.component.scss']\r\n})\r\nexport class ListTransactionsComponent {\r\n\r\n\r\n  /** List Transactions Data */\r\n  listTransactionData: any;\r\n  /** Data source for instructions table. */\r\n  dataSource = new MatTableDataSource();\r\n  /** Columns to be displayed in instructions table. */\r\n  displayedColumns: string[] = ['transactionDate', 'amount', 'notes', 'reversed'];\r\n\r\n  /** Paginator for centers table. */\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  /**\r\n   * Retrieves Recurring Deposits Account Data from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   */\r\n  constructor(private route: ActivatedRoute) {\r\n    this.route.data.subscribe((data: { listTransactionData: any }) => {\r\n      this.listTransactionData = data.listTransactionData;\r\n      this.dataSource = new MatTableDataSource(this.listTransactionData.transactions.pageItems);\r\n      this.dataSource.paginator = this.paginator;\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container m-b-20\">\r\n\r\n  <mat-card class=\"mat-elevation-z8\">\r\n\r\n    <mat-card-content>\r\n\r\n      <div fxLayout=\"row wrap\" class=\"content\">\r\n\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" class=\"header\">\r\n          From Account\r\n        </div>\r\n\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n          {{ listTransactionData.fromAccount.accountNo }}({{ listTransactionData.fromAccountType.value }})\r\n        </div>\r\n\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" class=\"header\">\r\n          To Account\r\n        </div>\r\n\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n          {{ listTransactionData.toAccount.accountNo }}({{ listTransactionData.toAccountType.value }})\r\n        </div>\r\n\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\" class=\"header\">\r\n          Destination\r\n        </div>\r\n\r\n        <div fxFlex=\"25%\" fxFlex.lt-md=\"50%\">\r\n          {{ listTransactionData.toClient.displayName }}\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </mat-card-content>\r\n\r\n  </mat-card>\r\n\r\n</div>\r\n\r\n<div class=\"mat-elevation-z8 container\">\r\n\r\n  <table mat-table [dataSource]=\"dataSource\">\r\n\r\n    <ng-container matColumnDef=\"transactionDate\">\r\n      <th mat-header-cell *matHeaderCellDef> Transaction Date </th>\r\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transferDate | date }} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"amount\">\r\n      <th mat-header-cell *matHeaderCellDef> Amount </th>\r\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transferAmount }} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"notes\">\r\n      <th mat-header-cell *matHeaderCellDef> Notes </th>\r\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.transferDescription }} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"reversed\">\r\n      <th mat-header-cell *matHeaderCellDef> Reversed </th>\r\n      <td mat-cell *matCellDef=\"let transaction\"> {{ transaction.reversed ? 'Yes' : 'No' }} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n    </tr>\r\n\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\r\n\r\n</div>\r\n","/** Angular Imports */\r\nimport { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n/** Custom Services */\r\nimport { AccountTransfersService } from '../account-transfers.service';\r\nimport { SettingsService } from 'app/settings/settings.service';\r\nimport { ClientsService } from 'app/clients/clients.service';\r\n\r\n\r\n/**\r\n * Create account transfers\r\n */\r\n@Component({\r\n  selector: 'mifosx-make-account-transfers',\r\n  templateUrl: './make-account-transfers.component.html',\r\n  styleUrls: ['./make-account-transfers.component.scss']\r\n})\r\nexport class MakeAccountTransfersComponent implements OnInit, AfterViewInit {\r\n\r\n  /** Standing Instructions Data */\r\n  accountTransferTemplateData: any;\r\n  /** Minimum date allowed. */\r\n  minDate = new Date(2000, 0, 1);\r\n  /** Maximum date allowed. */\r\n  maxDate = new Date(2100, 0, 1);\r\n  /** Edit Standing Instructions form. */\r\n  makeAccountTransferForm: FormGroup;\r\n  /** To Office Type Data */\r\n  toOfficeTypeData: any;\r\n  /** To Client Type Data */\r\n  toClientTypeData: any;\r\n  /** To Account Type Data */\r\n  toAccountTypeData: any;\r\n  /** To Account Data */\r\n  toAccountData: any;\r\n  /** Account Type Id */\r\n  accountTypeId: any;\r\n  /** Account Type */\r\n  accountType: any;\r\n  /** Savings Id or Loans Id */\r\n  id: any;\r\n  /** Clients Data */\r\n  clientsData: any;\r\n\r\n  /**\r\n   * Retrieves the standing instructions template from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   * @param {FormBuilder} formBuilder Form Builder\r\n   * @param {Router} router Router\r\n   * @param {AccountTransfersService} accountTransfersService Account Transfers Service\r\n   * @param {DatePipe} datePipe Date Pipe\r\n   * @param {SettingsService} settingsService Settings Service\r\n   * @param {ClientsService} clientsService Clients Service\r\n   */\r\n  constructor(private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountTransfersService: AccountTransfersService,\r\n    private datePipe: DatePipe,\r\n    private settingsService: SettingsService,\r\n    private clientsService: ClientsService) {\r\n    this.route.data.subscribe((data: { accountTransferTemplate: any }) => {\r\n      this.accountTransferTemplateData = data.accountTransferTemplate;\r\n      this.setParams();\r\n      this.setOptions();\r\n    });\r\n  }\r\n  /** Sets the value from the URL */\r\n  setParams() {\r\n    this.accountType = this.route.snapshot.queryParams['accountType'];\r\n    switch (this.accountType) {\r\n      case 'fromloans':\r\n        this.accountTypeId = '1';\r\n        this.id = this.route.snapshot.queryParams['loanId'];\r\n        break;\r\n      case 'fromsavings':\r\n        this.accountTypeId = '2';\r\n        this.id = this.route.snapshot.queryParams['savingsId'];\r\n        break;\r\n      default:\r\n        this.accountTypeId = '0';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates and sets the create standing instructions form.\r\n   */\r\n  ngOnInit() {\r\n    this.createMakeAccountTransferForm();\r\n  }\r\n\r\n  /**\r\n   * Creates the standing instruction form.\r\n   */\r\n  createMakeAccountTransferForm() {\r\n    this.makeAccountTransferForm = this.formBuilder.group({\r\n      'toOfficeId': ['', Validators.required],\r\n      'toClientId': ['', Validators.required],\r\n      'toAccountType': ['', Validators.required],\r\n      'toAccountId': ['', Validators.required],\r\n      'transferAmount': [this.accountTransferTemplateData.transferAmount, Validators.required],\r\n      'transferDate': ['', Validators.required],\r\n      'transferDescription': ['', Validators.required],\r\n    });\r\n  }\r\n\r\n  /** Sets options value */\r\n  setOptions() {\r\n    this.toOfficeTypeData = this.accountTransferTemplateData.toOfficeOptions;\r\n    this.toAccountTypeData = this.accountTransferTemplateData.toAccountTypeOptions;\r\n    this.toAccountData = this.accountTransferTemplateData.toAccountOptions;\r\n  }\r\n\r\n  /** Executes on change of various select options */\r\n  changeEvent() {\r\n    const formValue = this.refineObject(this.makeAccountTransferForm.value);\r\n    this.accountTransfersService.newAccountTranferResource(this.id, this.accountTypeId, formValue).subscribe((response: any) => {\r\n      this.accountTransferTemplateData = response;\r\n      this.toClientTypeData = response.toClientOptions;\r\n      this.setOptions();\r\n    });\r\n  }\r\n\r\n  /** Refine Object\r\n   * Removes the object param with null or '' values\r\n   */\r\n  refineObject(dataObj: { [x: string]: any; transferAmount: any; transferDate: any; transferDescription: any; }) {\r\n    delete dataObj.transferAmount;\r\n    delete dataObj.transferDate;\r\n    delete dataObj.transferDescription;\r\n    if (dataObj.toClientId) {\r\n      dataObj.toClientId = dataObj.toClientId.id;\r\n    }\r\n    const propNames = Object.getOwnPropertyNames(dataObj);\r\n    for (let i = 0; i < propNames.length; i++) {\r\n      const propName = propNames[i];\r\n      if (dataObj[propName] === null || dataObj[propName] === undefined || dataObj[propName] === '') {\r\n        delete dataObj[propName];\r\n      }\r\n    }\r\n    return dataObj;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to Clients search filter:\r\n   */\r\n  ngAfterViewInit() {\r\n    this.makeAccountTransferForm.controls.toClientId.valueChanges.subscribe((value: string) => {\r\n      if (value.length >= 2) {\r\n        this.clientsService.getFilteredClients('displayName', 'ASC', true, value)\r\n          .subscribe((data: any) => {\r\n            this.clientsData = data.pageItems;\r\n          });\r\n        this.changeEvent();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Displays Client name in form control input.\r\n   * @param {any} client Client data.\r\n   * @returns {string} Client name if valid otherwise undefined.\r\n   */\r\n  displayClient(client: any): string | undefined {\r\n    return client ? client.displayName : undefined;\r\n  }\r\n\r\n  /**\r\n   * Submits the standing instructions form\r\n   */\r\n  submit() {\r\n    const dateFormat = this.settingsService.dateFormat;\r\n    const locale = this.settingsService.language.code;\r\n    const makeAccountTransferData = {\r\n      ... this.makeAccountTransferForm.value,\r\n      transferDate: this.datePipe.transform(this.makeAccountTransferForm.value.transferDate, dateFormat),\r\n      dateFormat,\r\n      locale,\r\n      toClientId: this.makeAccountTransferForm.controls.toClientId.value.id,\r\n      fromAccountId: this.id,\r\n      fromAccountType: this.accountTypeId,\r\n      fromClientId: this.accountTransferTemplateData.fromClient.id,\r\n      fromOfficeId: this.accountTransferTemplateData.fromClient.officeId\r\n    };\r\n    this.accountTransfersService.createAccountTransfer(makeAccountTransferData).subscribe(() => {\r\n      this.router.navigate(['../../general'], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n  <mat-card>\r\n\r\n    <mat-card-content>\r\n\r\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\r\n\r\n        <h3 class=\"mat-h3\" fxFlexFill>Transferring From Details</h3>\r\n\r\n        <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Applicant</span>\r\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromClient.displayName }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Office</span>\r\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromOffice.name }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">From Account</span>\r\n          <span\r\n            fxFlex=\"60%\">{{ accountTransferTemplateData.fromAccount.productName}}&nbsp;-&nbsp;#{{ accountTransferTemplateData.fromAccount.accountNo }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">From Account Type</span>\r\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.fromAccountType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Currency</span>\r\n          <span fxFlex=\"60%\">{{ accountTransferTemplateData.currency.name }}</span>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <h3 class=\"mat-h3\" fxFlexFill>Transferring To</h3>\r\n\r\n      <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n      <form [formGroup]=\"makeAccountTransferForm\">\r\n\r\n        <div fxLayout=\"row wrap\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\">\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Office</mat-label>\r\n            <mat-select required formControlName=\"toOfficeId\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toOfficeType of toOfficeTypeData\" [value]=\"toOfficeType.id\">\r\n                {{ toOfficeType.name }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toOfficeId.hasError('required')\">\r\n              Office is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Client</mat-label>\r\n            <input matInput formControlName=\"toClientId\" [matAutocomplete]=\"clientsAutocomplete\">\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toClientId.hasError('required')\">\r\n              Client is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-autocomplete autoActiveFirstOption #clientsAutocomplete=\"matAutocomplete\" [displayWith]=\"displayClient\">\r\n            <mat-option *ngFor=\"let client of clientsData\" [value]=\"client\">\r\n              {{ client.id }} - {{ client.displayName }}\r\n            </mat-option>\r\n          </mat-autocomplete>\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Account Type</mat-label>\r\n            <mat-select required formControlName=\"toAccountType\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toAccountType of toAccountTypeData\" [value]=\"toAccountType.id\">\r\n                {{ toAccountType.value }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toAccountType.hasError('required')\">\r\n              Account Type is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Account</mat-label>\r\n            <mat-select required formControlName=\"toAccountId\" (selectionChange)=\"changeEvent()\">\r\n              <mat-option *ngFor=\"let toAccount of toAccountData\" [value]=\"toAccount.id\">\r\n                {{ toAccount.productName }} - {{ toAccount.accountNo }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.toAccountId.hasError('required')\">\r\n              Account is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Amount</mat-label>\r\n            <input type=\"number\" matInput required formControlName=\"transferAmount\">\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.transferAmount.hasError('required')\">\r\n              Amount is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Transaction Date</mat-label>\r\n            <input matInput [min]=\"minDate\" [max]=\"maxDate\" [matDatepicker]=\"transferDatePicker\" required\r\n              formControlName=\"transferDate\">\r\n            <mat-datepicker-toggle matSuffix [for]=\"transferDatePicker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #transferDatePicker></mat-datepicker>\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.transferDate.hasError('required')\">\r\n              Transactions Date is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field fxFlex=\"98%\">\r\n            <mat-label>Description</mat-label>\r\n            <textarea matInput formControlName=\"transferDescription\"></textarea>\r\n            <mat-error *ngIf=\"makeAccountTransferForm.controls.transferDescription.hasError('required')\">\r\n              Transfer Description is <strong>required</strong>\r\n            </mat-error>\r\n\r\n          </mat-form-field>\r\n\r\n        </div>\r\n\r\n      </form>\r\n\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center\" fxLayoutGap=\"5px\">\r\n      <button type=\"button\" mat-raised-button [routerLink]=\"['../../general']\">Cancel</button>\r\n      <button mat-raised-button color=\"primary\" [disabled]=\"!makeAccountTransferForm.valid\" *mifosxHasPermission=\"'CREATE_ACCOUNTTRANSFER'\"\r\n        (click)=\"submit()\">Submit</button>\r\n    </mat-card-actions>\r\n\r\n  </mat-card>\r\n\r\n</div>\r\n","/** Angular Imports */\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'mifosx-view-account-transfer',\r\n  templateUrl: './view-account-transfer.component.html',\r\n  styleUrls: ['./view-account-transfer.component.scss']\r\n})\r\nexport class ViewAccountTransferComponent {\r\n\r\n  viewAccountTransferData: any;\r\n  /**\r\n   * Retrieves the view account transfer data from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   */\r\n  constructor(private route: ActivatedRoute) {\r\n    this.route.data.subscribe((data: { viewAccountTransferData: any }) => {\r\n      this.viewAccountTransferData = data.viewAccountTransferData;\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n\r\n  <mat-card>\r\n\r\n    <mat-card-content>\r\n\r\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\r\n\r\n        <h3 class=\"mat-h3\" fxFlexFill>Transaction Details</h3>\r\n\r\n        <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Transaction Amount:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.transferAmount }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Transaction Date:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.transferDate | date }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Description:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.transferDescription }}</span>\r\n        </div>\r\n\r\n        <h3 class=\"mat-h3\" fxFlexFill>Transferred From</h3>\r\n\r\n        <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Office:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromOffice.name }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Client:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromClient.displayName }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Account Type:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromAccountType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Account #:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.fromAccount.accountNo }}</span>\r\n        </div>\r\n\r\n        <h3 class=\"mat-h3\" fxFlexFill>Transferred To</h3>\r\n\r\n        <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Office:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.toOffice.name }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Client:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.toClient.displayName }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Account Type:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.toAccountType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Account #:</span>\r\n          <span fxFlex=\"60%\">{{ viewAccountTransferData.toAccount.accountNo }}</span>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </mat-card-content>\r\n\r\n  </mat-card>\r\n\r\n</div>\r\n","/** Angular Imports */\r\nimport { Component } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'mifosx-view-standing-instructions',\r\n  templateUrl: './view-standing-instructions.component.html',\r\n  styleUrls: ['./view-standing-instructions.component.scss']\r\n})\r\nexport class ViewStandingInstructionsComponent {\r\n\r\n  /** Standing Instructions Data */\r\n  standingInstructionsData: any;\r\n  /** Allow Client Edit */\r\n  allowclientedit = false;\r\n\r\n  /**\r\n   * Retrieves the standing instructions data from `resolve`.\r\n   * @param {ActivatedRoute} route Activated Route.\r\n   */\r\n  constructor(private route: ActivatedRoute) {\r\n    this.route.data.subscribe((data: { standingInstructionsData: any}) => {\r\n      this.standingInstructionsData = data.standingInstructionsData;\r\n      if (this.standingInstructionsData.fromClient.id === this.standingInstructionsData.toClient.id) {\r\n        this.allowclientedit = false;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"end\" fxLayoutGap=\"2%\" fxLayout.lt-md=\"column\" class=\"container m-b-20\">\r\n  <button mat-raised-button color=\"primary\" [routerLink]=\"['../', 'edit']\">\r\n    <fa-icon icon=\"edit\"></fa-icon>&nbsp;&nbsp;\r\n    Edit\r\n  </button>\r\n  <button mat-raised-button color=\"primary\" [routerLink]=\"['../', 'list-account-transactions']\" *mifosxHasPermission=\"'READ_ACCOUNTTRANSFER'\">\r\n    View Transactions History\r\n  </button>\r\n</div>\r\n\r\n<div class=\"container\">\r\n\r\n  <mat-card>\r\n\r\n    <mat-card-content>\r\n\r\n      <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\">\r\n\r\n        <h2 class=\"mat-h2\" fxFlexFill>{{ standingInstructionsData.name }}</h2>\r\n\r\n        <mat-divider [inset]=\"true\"></mat-divider>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Applicant:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.fromClient.displayName }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Type:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.transferType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Priority:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.priority.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Status:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.status.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">From Account Type:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.fromAccountType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">From Account:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.fromAccount.productName }} - {{ standingInstructionsData.fromAccount.accountNo }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Destination:</span>\r\n          <span fxFlex=\"60%\">\r\n            <span *ngIf=\"allowclientedit\"> Within Bank </span>\r\n            <span *ngIf=\"!allowclientedit\"> Own Account </span>\r\n          </span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">To Office:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toOffice.name }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Beneficiary:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toClient.displayName }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">To Account Type:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toAccountType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">To Account:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.toAccount.productName }} - {{standingInstructionsData.toAccount.accountNo}}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Standing Instruction Type:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.instructionType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Amount:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.amount }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Validity:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.validFrom | date }} - {{ standingInstructionsData.validTill | date }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Recurrence type:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceType.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Interval:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceInterval }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">Recurrence Frequency:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceFrequency.value }}</span>\r\n        </div>\r\n\r\n        <div fxFlexFill>\r\n          <span fxFlex=\"40%\">On Month Day:</span>\r\n          <span fxFlex=\"60%\">{{ standingInstructionsData.recurrenceOnMonthDay | date }}</span>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </mat-card-content>\r\n\r\n  </mat-card>\r\n\r\n</div>\r\n"],"sourceRoot":"webpack:///"}